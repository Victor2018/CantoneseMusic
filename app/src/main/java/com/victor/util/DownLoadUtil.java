package com.victor.util;import com.victor.data.MusicData;import com.victor.module.DataObservable;import java.util.ArrayList;import java.util.List;import java.util.Observable;import java.util.Observer;import java.util.concurrent.ExecutorService;import java.util.concurrent.Executors;/** * Created by victor on 2016/7/8. */public class DownLoadUtil implements Observer{    private String TAG = "DownLoadUtil";    /**     * 下载Image的线程池     */    private ExecutorService mThreadPool = null;    private static DownLoadUtil mDownLoadUtil;    private List<MusicData> downloadMusicList = new ArrayList<>();    public static DownLoadUtil getInstance () {        if (mDownLoadUtil == null) {            mDownLoadUtil = new DownLoadUtil();        }        return mDownLoadUtil;    }    public List<MusicData> getDownloadMusicList () {        return downloadMusicList;    }    public DownLoadUtil () {        DataObservable.getInstance().addObserver(this);    }    public void downLoad (MusicData info) {        downloadMusicList.add(info);        DataObservable.getInstance().setData(Constant.Action.UPDATE_DOWNLOAD_LIST);        getThreadPool().execute(new DownLoadThread(info));    }    /**     * 获取线程池的方法，因为涉及到并发的问题，我们加上同步锁     * @return     */    public ExecutorService getThreadPool(){        if(mThreadPool == null){            synchronized(ExecutorService.class){                if(mThreadPool == null){                    mThreadPool = Executors.newFixedThreadPool(1);                }            }        }        return mThreadPool;    }    @Override    public void update(Observable observable, Object data) {        if (data instanceof Integer) {            int action = (int) data;            if (action == Constant.Action.DOWNLOAD_OVER) {                if (downloadMusicList != null && downloadMusicList.size() > 0) {                    downloadMusicList.remove(0);                    DataObservable.getInstance().setData(Constant.Action.UPDATE_DOWNLOAD_LIST);                }            }        }    }}