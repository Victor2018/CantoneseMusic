package com.victor.util;import android.text.TextUtils;import android.util.Log;import com.victor.data.LrcData;import com.victor.data.MusicData;import com.victor.data.SongListInfo;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;import java.util.ArrayList;import java.util.List;/** * Created by victor on 2016/7/6. */public class JsonParser {    private static String TAG = "JsonParser";    public static SongListInfo parseCategory (String result) throws JSONException {        SongListInfo info = null;        if (TextUtils.isEmpty(result)) return null;        JSONObject data = new JSONObject(result);        JSONArray datas = data.getJSONArray("song_list");        JSONObject billboard = data.getJSONObject("billboard");        if (datas != null && datas.length() >= 3) {            info = new SongListInfo();            info.music1 = datas.getJSONObject(0).optString("title").trim() + "-" + datas.getJSONObject(0).optString("author").trim();            info.music2 = datas.getJSONObject(1).optString("title").trim() + "-" + datas.getJSONObject(1).optString("author").trim();            info.music3 = datas.getJSONObject(2).optString("title").trim() + "-" + datas.getJSONObject(2).optString("author").trim();            info.pic_s260 = billboard.optString("pic_s640").trim();            info.pic_s444 = billboard.optString("pic_s444").trim();            info.pic_s640 = billboard.optString("pic_s640").trim();        }        return info;    }    public static List<MusicData> parseMusics (String result) throws JSONException {        List<MusicData> musicDatas = new ArrayList<>();        if (TextUtils.isEmpty(result)) return musicDatas;        JSONObject data = new JSONObject(result);        JSONArray datas = data.getJSONArray("song_list");        if (datas != null && datas.length() > 0) {            for (int i=0;i<datas.length();i++) {                MusicData info = new MusicData();                JSONObject item = datas.getJSONObject(i);                info.pic_small = item.optString("pic_small").trim();                info.song_id = item.optString("song_id").trim();                info.title = item.optString("title").trim();                info.artist = item.optString("author").trim();                info.dataType = 1;                musicDatas.add(info);            }        }        return musicDatas;    }    public static MusicData parseMusic (String result) throws JSONException {        MusicData info = new MusicData();        if (TextUtils.isEmpty(result)) return null;        JSONObject data = new JSONObject(result);        JSONObject songinfo = data.getJSONObject("songinfo");        JSONObject bitrate = data.getJSONObject("bitrate");        info.pic_big = songinfo.optString("pic_big").trim();        info.pic_small = songinfo.optString("pic_small").trim();        info.lrclink = songinfo.optString("lrclink").trim();        info.song_id = songinfo.optString("song_id").trim();        info.title = songinfo.optString("title").trim();        info.artist = songinfo.optString("author").trim();        info.artist_id = songinfo.optString("artist_id").trim();        info.file_size = bitrate.optInt("file_size");        info.file_extension = bitrate.optString("file_extension").trim();        info.show_link = bitrate.optString("show_link").trim();        info.data = bitrate.optString("file_link").trim();        info.dataType = 1;        return info;    }    public static List<MusicData> parseSearchMusics (String result) throws JSONException {        List<MusicData> musicDatas = new ArrayList<>();        if (TextUtils.isEmpty(result)) return musicDatas;        JSONObject data = new JSONObject(result);        JSONArray datas = data.getJSONArray("song");        if (datas != null && datas.length() > 0) {            for (int i=0;i<datas.length();i++) {                MusicData info = new MusicData();                JSONObject item = datas.getJSONObject(i);                info.song_id = item.optString("songid").trim();                info.title = item.optString("songname").trim();                info.artist = item.optString("artistname").trim();                info.dataType = 1;                musicDatas.add(info);            }        }        return musicDatas;    }    public static LrcData parseLrc (String result) throws JSONException {        LrcData ld = null;        if (TextUtils.isEmpty(result)) return ld;        ld = new LrcData();        JSONObject data = new JSONObject(result);        ld.title = data.optString("title").trim();        ld.lrcContent = data.optString("lrcContent").trim();        return ld;    }}