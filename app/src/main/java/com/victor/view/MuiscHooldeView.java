package com.victor.view;import android.animation.Animator;import android.animation.AnimatorListenerAdapter;import android.animation.TypeEvaluator;import android.animation.ValueAnimator;import android.annotation.TargetApi;import android.content.Context;import android.content.res.Resources;import android.graphics.Canvas;import android.graphics.Paint;import android.graphics.Point;import android.os.Build;import android.util.AttributeSet;import android.util.DisplayMetrics;import android.view.View;import android.view.ViewGroup;import android.view.animation.AccelerateDecelerateInterpolator;import com.victor.music.R;/** * Created by victor on 2016/08/04. */public class MuiscHooldeView extends View implements ValueAnimator.AnimatorUpdateListener {    public static final int VIEW_SIZE = 20;    protected Context mContext;    protected Paint mPaint4Circle;    protected int radius;    protected Point startPosition;    protected Point endPosition;    public MuiscHooldeView(Context context) {        this(context, null);    }    public MuiscHooldeView(Context context, AttributeSet attrs) {        this(context, attrs, 0);    }    @TargetApi(Build.VERSION_CODES.LOLLIPOP)    public MuiscHooldeView(Context context, AttributeSet attrs, int defStyleAttr) {        super(context, attrs, defStyleAttr);        this.mContext = context;//        mPaint4Circle = new Paint();//        mPaint4Circle.setColor(mContext.getResources().getColor(R.color.colorLimePrimary));//        mPaint4Circle.setAntiAlias(true);//        setGravity(Gravity.CENTER);//        setText("1");//        setTextColor(Color.WHITE);//        setTextSize(12);        setBackground(mContext.getDrawable(R.mipmap.logo));    }    public void setStartPosition(Point startPosition) {        startPosition.y -= 10;        this.startPosition = startPosition;    }    public void setEndPosition(Point endPosition) {        this.endPosition = endPosition;    }    @Override    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {        int PX4SIZE = (int) convertDpToPixel(VIEW_SIZE, mContext);        setMeasuredDimension(PX4SIZE, PX4SIZE);        radius = PX4SIZE / 2;    }    @Override    protected void onDraw(Canvas canvas) {//        canvas.drawCircle(getMeasuredWidth() / 2, getMeasuredHeight() / 2, radius, mPaint4Circle);        super.onDraw(canvas);    }    public void startBeizerAnimation() {        //随机生成x水平结束位置//        int minEndX = 720/2 -200;//        int maxEndX = 720/2 +200;//        endPosition.x = (int) (Math.random() * (maxEndX - minEndX + 1)) + minEndX;        //随机生成X控制点        int minCtrlX = 2;        int maxCtrlX = 10;        int ctrlX = (int) (Math.random() * (maxCtrlX - minCtrlX + 1)) + minCtrlX;        if (startPosition == null || endPosition == null) return;//        int pointX = (startPosition.x + endPosition.x) / 2;//随机生成X控制点        int pointX = (startPosition.x + endPosition.x) / ctrlX;//随机生成X控制点        int pointY = (int) (startPosition.y - convertDpToPixel(100, mContext));        Point controllPoint = new Point(pointX, pointY);        BezierEvaluator bezierEvaluator = new BezierEvaluator(controllPoint);        ValueAnimator anim = ValueAnimator.ofObject(bezierEvaluator, startPosition, endPosition);        anim.addUpdateListener(this);        anim.setDuration(500);        anim.addListener(new AnimatorListenerAdapter() {            @Override            public void onAnimationEnd(Animator animation) {                super.onAnimationEnd(animation);                ViewGroup viewGroup = (ViewGroup) getParent();                viewGroup.removeView(MuiscHooldeView.this);            }        });        anim.setInterpolator(new AccelerateDecelerateInterpolator());        anim.start();    }    @Override    public void onAnimationUpdate(ValueAnimator animation) {        Point point = (Point) animation.getAnimatedValue();        setX(point.x);        setY(point.y);        invalidate();    }    public class BezierEvaluator implements TypeEvaluator<Point> {        private Point controllPoint;        public BezierEvaluator(Point controllPoint) {            this.controllPoint = controllPoint;        }        @Override        public Point evaluate(float t, Point startValue, Point endValue) {            int x = (int) ((1 - t) * (1 - t) * startValue.x + 2 * t * (1 - t) * controllPoint.x + t * t * endValue.x);            int y = (int) ((1 - t) * (1 - t) * startValue.y + 2 * t * (1 - t) * controllPoint.y + t * t * endValue.y);            return new Point(x, y);        }    }    public static float convertDpToPixel(float dp, Context context) {        Resources resources = context.getResources();        DisplayMetrics metrics = resources.getDisplayMetrics();        float px = dp * (metrics.densityDpi / 160f);        return px;    }}