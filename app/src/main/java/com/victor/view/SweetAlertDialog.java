package com.victor.view;import android.app.Dialog;import android.content.Context;import android.view.Gravity;import android.view.View;import android.view.Window;import android.view.WindowManager;import android.view.animation.Animation;import android.view.animation.AnimationSet;import android.view.animation.Transformation;import android.widget.Button;import android.widget.TextView;import com.victor.music.R;public class SweetAlertDialog extends Dialog implements View.OnClickListener {    private View mDialogView;    private AnimationSet mModalInAnim;    private AnimationSet mModalOutAnim;    private Animation mOverlayOutAnim;    private TextView mTitleTextView;    private TextView mContentTextView;    private String mTitleText;    private String mContentText;    private boolean mShowContent;    private Button mConfirmButton;    private Button mCancelButton;    private OnSweetClickListener mCancelClickListener;    private OnSweetClickListener mConfirmClickListener;    private boolean mCloseFromCancel;    private Context mContext;    public static interface OnSweetClickListener {        public void onClick(SweetAlertDialog sweetAlertDialog);    }    public SweetAlertDialog(Context context) {        super(context,android.R.style.Theme_Holo_Light_NoActionBar_Fullscreen);        mContext = context;        windowDeploy();        initialize();    }    private void initialize () {    	setContentView(R.layout.alert_dialog);    	 mDialogView = getWindow().getDecorView().findViewById(android.R.id.content);         mTitleTextView = (TextView)findViewById(R.id.title_text);         mContentTextView = (TextView)findViewById(R.id.content_text);         mConfirmButton = (Button)findViewById(R.id.confirm_button);         mCancelButton = (Button)findViewById(R.id.cancel_button);         mConfirmButton.setOnClickListener(this);         mCancelButton.setOnClickListener(this);    	mModalInAnim = (AnimationSet) OptAnimationLoader.loadAnimation(getContext(), R.anim.modal_in);        mModalOutAnim = (AnimationSet) OptAnimationLoader.loadAnimation(getContext(), R.anim.modal_out);        mModalOutAnim.setAnimationListener(new Animation.AnimationListener() {            @Override            public void onAnimationStart(Animation animation) {            }            @Override            public void onAnimationEnd(Animation animation) {                mDialogView.setVisibility(View.GONE);                mDialogView.post(new Runnable() {                    @Override                    public void run() {                        if (mCloseFromCancel) {                            SweetAlertDialog.super.cancel();                        } else {                            SweetAlertDialog.super.dismiss();                        }                    }                });            }            @Override            public void onAnimationRepeat(Animation animation) {            }        });        // dialog overlay fade out        mOverlayOutAnim = new Animation() {            @Override            protected void applyTransformation(float interpolatedTime, Transformation t) {                WindowManager.LayoutParams wlp = getWindow().getAttributes();                wlp.alpha = 1 - interpolatedTime;                getWindow().setAttributes(wlp);            }        };        mOverlayOutAnim.setDuration(120);    }    public void showCancelBtn(boolean isShow){    	if (isShow) {    		mCancelButton.setVisibility(View.VISIBLE);    	} else {    		mCancelButton.setVisibility(View.GONE);    	}    }    public String getTitleText () {        return mTitleText;    }    public SweetAlertDialog setTitleText (String text) {        mTitleText = text;        if (mTitleTextView != null && mTitleText != null) {            mTitleTextView.setText(mTitleText);        }        return this;    }    public String getContentText () {        return mContentText;    }    public SweetAlertDialog setContentText (String text) {        mContentText = text;        if (mContentTextView != null && mContentText != null) {            showContentText(true);            mContentTextView.setText(mContentText);        }        return this;    }    public boolean isShowContentText () {        return mShowContent;    }    public SweetAlertDialog showContentText (boolean isShow) {        mShowContent = isShow;        if (mContentTextView != null) {            mContentTextView.setVisibility(mShowContent ? View.VISIBLE : View.GONE);        }        return this;    }    public SweetAlertDialog setCancelClickListener (OnSweetClickListener listener) {        mCancelClickListener = listener;        return this;    }    public SweetAlertDialog setConfirmClickListener (OnSweetClickListener listener) {        mConfirmClickListener = listener;        return this;    }    protected void onStart() {        mDialogView.startAnimation(mModalInAnim);    }    /**     * The real Dialog.cancel() will be invoked async-ly after the animation finishes.     */    @Override    public void cancel() {        dismissWithAnimation(true);    }    /**     * The real Dialog.dismiss() will be invoked async-ly after the animation finishes.     */    public void dismissWithAnimation() {        dismissWithAnimation(false);    }    private void dismissWithAnimation(boolean fromCancel) {        mCloseFromCancel = fromCancel;        mConfirmButton.startAnimation(mOverlayOutAnim);        mDialogView.startAnimation(mModalOutAnim);    }    @Override    public void onClick(View v) {        if (v.getId() == R.id.cancel_button) {            if (mCancelClickListener != null) {                mCancelClickListener.onClick(SweetAlertDialog.this);            } else {                dismissWithAnimation();            }        } else if (v.getId() == R.id.confirm_button) {            if (mConfirmClickListener != null) {                mConfirmClickListener.onClick(SweetAlertDialog.this);            } else {                dismissWithAnimation();            }        }    }    private void windowDeploy () {        Window window = getWindow();        // 设置背景        window.setBackgroundDrawableResource(android.R.color.transparent); // 设置对话框背景        window.setDimAmount(0.7f); // 后面窗口变暗值        setCanceledOnTouchOutside(true); // 触摸其它地方消失        WindowManager.LayoutParams wl = window.getAttributes();        // 设置位置        wl.gravity = Gravity.CENTER; // 重心: 将改变坐标原点的位置, 例: 重点在中心, 则原点在中心        wl.x = 0;        wl.y = 0;        WindowManager wm = (WindowManager)mContext.getSystemService(Context.WINDOW_SERVICE);        int width = wm.getDefaultDisplay().getWidth();        int height = wm.getDefaultDisplay().getHeight();        wl.width = (int) (width * 0.8);        wl.height = (int) (height *0.3);        // 设置特效        wl.alpha = 1.0f; // 透明度        // 设置出入动画, 也可用window.setWindowAnimations();设置        wl.windowAnimations = R.style.dialogWindowAnim;        window.setAttributes(wl);    }}