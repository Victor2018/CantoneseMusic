package com.victor.adapter;import android.content.Context;import android.support.v7.widget.RecyclerView;import android.util.Log;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.ImageView;import android.widget.TextView;import com.bumptech.glide.Glide;import com.victor.data.SongListInfo;import com.victor.module.HttpRequestHelper;import com.victor.module.HttpRequestModule;import com.victor.music.R;import com.victor.util.Constant;import com.victor.util.JsonParser;import com.victor.util.Loger;import org.json.JSONException;/** * Created by victor on 2016/6/1. */public class MusicOnlineAdapter extends RecyclerView.Adapter<RecyclerView.ViewHolder>{    private String TAG = "MusicOnlineAdapter";    private final LayoutInflater mLayoutInflater;    private final Context mContext;    public String[] titles,types;    private boolean isHeaderVisible = true;    private boolean isFooterVisible = true;    protected int mHeaderCount = 1;//头部View个数    protected int mBottomCount = 1;//底部View个数    private int ITEM_TYPE_HEADER = 0;    private int ITEM_TYPE_CONTENT = 1;    private int ITEM_TYPE_BOTTOM = 2;    private int ITEM_TYPE_TITLE = 3;    private static OnItemClickListener mOnItemClickListener;    public interface OnItemClickListener {        void OnItemClick (int position,String imgUrl);    }    public MusicOnlineAdapter(Context context, OnItemClickListener listener, HttpRequestHelper helper) {        mContext = context;        mOnItemClickListener = listener;        titles = context.getResources().getStringArray(R.array.online_music_list_title);        types = context.getResources().getStringArray(R.array.online_music_list_type);        mLayoutInflater = LayoutInflater.from(mContext);    }    public void setHeaderVisible (boolean visible) {        isHeaderVisible = visible;        mHeaderCount = 1;        if (!isHeaderVisible) {            mHeaderCount = 0;        }        notifyDataSetChanged();    }    public void setFooterVisible (boolean visible) {        isFooterVisible = visible;        mBottomCount = 1;        if (!isFooterVisible) {            mBottomCount = 0;        }        notifyDataSetChanged();    }    @Override    public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {        if (viewType == ITEM_TYPE_HEADER) {            return onCreateHeaderView(parent);        } else if (viewType == ITEM_TYPE_TITLE) {            return onCreateTitleView(parent);        } else if (viewType == ITEM_TYPE_CONTENT) {            return onCreateContentView(parent);        } else if (viewType == ITEM_TYPE_BOTTOM) {            return onCreateBottomView(parent);        }        return null;    }    public RecyclerView.ViewHolder onCreateTitleView (ViewGroup parent){        return new TitleViewHolder(mLayoutInflater.inflate(R.layout.view_holder_song_list_profile, parent, false));    }    public RecyclerView.ViewHolder onCreateHeaderView (ViewGroup parent){        return new HeaderViewHolder(mLayoutInflater.inflate(R.layout.recyclerview_img_item, parent, false));    }    public RecyclerView.ViewHolder onCreateContentView (ViewGroup parent){        return new ContentViewHolder(mLayoutInflater.inflate(R.layout.view_holder_song_list, parent, false));    }    public RecyclerView.ViewHolder onCreateBottomView (ViewGroup parent) {        return new BottomViewHolder(mLayoutInflater.inflate(R.layout.recyclerview_img_item, parent, false));    }    @Override    public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) {        if (holder instanceof HeaderViewHolder) {//            ((HeaderViewHolder) holder).mTvTitle.setText(titleList.get(0));        } else if (holder instanceof TitleViewHolder) {            ((TitleViewHolder) holder).mTvProfile.setText(titles[position - mHeaderCount]);        } else if (holder instanceof ContentViewHolder) {            final ContentViewHolder contentViewHolder = (ContentViewHolder) holder;            String url = String.format(Constant.CATEGORY_URL,Constant.METHOD_MUSIC_LIST,types[position - mHeaderCount],Constant.PAGE_SIZE);            HttpRequestModule.request(TAG, mContext,url, new HttpRequestModule.OnCompleteListener() {                @Override                public void onComplete(int status, Object result) {                    if (status == 1) {                        SongListInfo info = null;                        try {                            info = JsonParser.parseCategory(result.toString());                            if (info == null) return;                            contentViewHolder.mTvMusic1.setText(info.music1);                            contentViewHolder.mTvMusic2.setText(info.music2);                            Glide.with(mContext).load(info.pic_s210).centerCrop().error(R.mipmap.default_cover).into(contentViewHolder.mIvImg);                        } catch (JSONException e) {                            e.printStackTrace();                        }                    }                }            });        } else if (holder instanceof BottomViewHolder) {            ((BottomViewHolder) holder).mTvTitle.setVisibility(View.GONE);        }    }    @Override    public int getItemViewType(int position) {        int dataItemCount = getContentItemCount();        if (mHeaderCount != 0 && position < mHeaderCount) {//头部View            return ITEM_TYPE_HEADER;        } else if (mBottomCount != 0 && position >= (mHeaderCount + dataItemCount)) {//底部View            return ITEM_TYPE_BOTTOM;        } else if (types[position - mHeaderCount].equals("#")) {            return ITEM_TYPE_TITLE;        } else {            return ITEM_TYPE_CONTENT;        }    }    public boolean isHeaderView(int position) {        return mHeaderCount != 0 && position < mHeaderCount;    }    public boolean isBottomView(int position) {        return mBottomCount != 0 && position >= (mHeaderCount + getContentItemCount());    }    public void add(String title) {//        titleList.add(title);        notifyItemInserted(1);    }    public void remove(int position) {//        titleList.remove(position);        notifyItemRemoved(position);    }    public int getContentItemCount() {        return types == null ? 0 : types.length;    }    @Override    public int getItemCount() {        return mHeaderCount + getContentItemCount() + mBottomCount;    }    public class ContentViewHolder extends RecyclerView.ViewHolder implements View.OnClickListener{        ImageView mIvImg;        TextView mTvMusic1,mTvMusic2;        ContentViewHolder(View view) {            super(view);            mIvImg = (ImageView) view.findViewById(R.id.iv_img);            mTvMusic1 = (TextView) view.findViewById(R.id.tv_music_1);            mTvMusic2 = (TextView) view.findViewById(R.id.tv_music_2);            view.setOnClickListener(this);        }        @Override        public void onClick(View v) {            if (!titles[getAdapterPosition() - mHeaderCount].equals("#")) {                if (mOnItemClickListener != null) {                    mOnItemClickListener.OnItemClick(getAdapterPosition() - mHeaderCount, (String) mTvMusic1.getTag());                }            }        }    }    public static class TitleViewHolder extends RecyclerView.ViewHolder {        TextView mTvProfile;        public TitleViewHolder(View itemView) {            super(itemView);            mTvProfile = (TextView) itemView.findViewById(R.id.tv_profile);        }    }    public static class HeaderViewHolder extends RecyclerView.ViewHolder {        ImageView mIvImg;        TextView mTvTitle;        public HeaderViewHolder(View itemView) {            super(itemView);            mIvImg = (ImageView) itemView.findViewById(R.id.iv_img);            mTvTitle = (TextView) itemView.findViewById(R.id.tv_title);        }    }    public static class BottomViewHolder extends RecyclerView.ViewHolder {        ImageView mIvImg;        TextView mTvTitle;        public BottomViewHolder(View itemView) {            super(itemView);            mIvImg = (ImageView) itemView.findViewById(R.id.iv_img);            mTvTitle = (TextView) itemView.findViewById(R.id.tv_title);        }    }}