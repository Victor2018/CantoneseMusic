package com.victor.fragments;import android.content.ContentUris;import android.content.ContentValues;import android.content.Context;import android.content.DialogInterface;import android.content.Intent;import android.database.Cursor;import android.media.RingtoneManager;import android.net.Uri;import android.os.Bundle;import android.os.Environment;import android.os.Handler;import android.os.Message;import android.provider.MediaStore;import android.support.annotation.Nullable;import android.support.v4.app.Fragment;import android.support.v7.app.AlertDialog;import android.support.v7.widget.LinearLayoutManager;import android.support.v7.widget.RecyclerView;import android.text.Editable;import android.text.TextUtils;import android.text.TextWatcher;import android.util.Log;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.AdapterView;import android.widget.ListView;import android.widget.TextView;import android.widget.Toast;import com.bumptech.glide.Glide;import com.victor.adapter.MusicLocalAdapter;import com.victor.adapter.MusicSearchAdapter;import com.victor.dao.DbDao;import com.victor.data.MusicData;import com.victor.module.DataObservable;import com.victor.module.HttpRequestHelper;import com.victor.module.PlayModule;import com.victor.music.R;import com.victor.util.CharacterParser;import com.victor.util.Constant;import com.victor.util.MusicUtil;import com.victor.util.PinyinComparator;import com.victor.util.SharePreferencesUtil;import com.victor.view.ClearEditText;import com.victor.view.SideBar;import java.io.File;import java.util.ArrayList;import java.util.Collections;import java.util.List;import java.util.Observable;import java.util.Observer;/** * Created by victor on 2016/7/7. */public class MusicLocalFrag extends Fragment implements AdapterView.OnItemClickListener,        SideBar.OnTouchingLetterChangedListener,TextWatcher,MusicLocalAdapter.OnMoreClickListener,Observer{    private String TAG = "MusicLocalFrag";    private Context mContext;    private ListView mLvMusic;    private MusicLocalAdapter musicLocalAdapter;    private List<MusicData> searchList = new ArrayList<>();    private MusicData musicData;    private HttpRequestHelper mHttpRequestHelper;    private SideBar sideBar;    private TextView dialog;    private ClearEditText mClearEditText;    /**     * 汉字转换成拼音的类     */    private CharacterParser characterParser;    /**     * 根据拼音来排列ListView里面的数据类     */    private PinyinComparator pinyinComparator;    private int current;    Handler mHandler = new Handler(){        @Override        public void handleMessage(Message msg) {            switch (msg.what) {                case Constant.Msg.SEARCH_SUCCESS:                    if (searchList != null && searchList.size() > 0) {                        // 根据a-z进行排序源数据                        filledData();                        Collections.sort(searchList, pinyinComparator);                        DbDao.getInstance(getActivity()).insertMusics(searchList,Constant.TB.MUSIC_ALL);                    }                    musicLocalAdapter.setMusicDatas(searchList);                    musicLocalAdapter.notifyDataSetChanged();                    current = SharePreferencesUtil.getInt(getActivity(),Constant.CURRENT_POSITION_KEY);                    int playStatus = Constant.PlayStatus.PAUSE;                    if (PlayModule.getInstance(getActivity()).isPlaying()) {                        playStatus = Constant.PlayStatus.PLAY;                    }                    if (PlayModule.getInstance(getActivity()).isPlayOnline()) {                        List<MusicData> onLineList = DbDao.getInstance(getActivity()).queryMusic(Constant.TB.MUSIC_ONLINE);                        if (onLineList != null && onLineList.size() > 0) {                            PlayModule.getInstance(getActivity()).updateCurrentPlay(onLineList.get(0),playStatus);                        }                    } else {                        PlayModule.getInstance(getActivity()).updateCurrentPlay(searchList.get(current),playStatus);                    }                    break;                case Constant.Msg.SEARCH_ERROR:                    Toast.makeText(mContext,"Sorroy,Not Search Music!",Toast.LENGTH_SHORT).show();                    musicLocalAdapter.setMusicDatas(searchList);                    musicLocalAdapter.notifyDataSetChanged();                    break;                case Constant.Action.CLEAR_ALL_MUSIC:                    searchList.clear();                    musicLocalAdapter.notifyDataSetChanged();                    break;                case Constant.Action.CLEAR_LIST_FOCUS:                    musicLocalAdapter.setCurrentPosition(-1);                    break;                case Constant.Action.UPDATE_CURRENT_POSITION:                    musicLocalAdapter.setCurrentPosition(msg.arg1);                    break;            }        }    };    @Nullable    @Override    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {        View view = inflater.inflate(R.layout.frag_local_music,container, false);        initialize(view);        initData();        return view;    }    private void initialize (View view) {        mContext = getActivity().getApplicationContext();        DataObservable.getInstance().addObserver(this);        mHttpRequestHelper = new HttpRequestHelper(mContext);        //实例化汉字转拼音类        characterParser = CharacterParser.getInstance();        pinyinComparator = new PinyinComparator();        sideBar = (SideBar) view.findViewById(R.id.sidrbar);        dialog = (TextView) view.findViewById(R.id.dialog);        sideBar.setTextView(dialog);        mClearEditText = (ClearEditText) view.findViewById(R.id.filter_edit);        mLvMusic = (ListView) view.findViewById(R.id.lv_music);        musicLocalAdapter = new MusicLocalAdapter(mContext,this);        musicLocalAdapter.setMusicDatas(searchList);        mLvMusic.setAdapter(musicLocalAdapter);        //设置右侧触摸监听        sideBar.setOnTouchingLetterChangedListener(this);        mLvMusic.setOnItemClickListener(this);        //根据输入框输入值的改变来过滤搜索        mClearEditText.addTextChangedListener(this);    }    private void initData () {        mHttpRequestHelper.sendRequest(Constant.Msg.SEARCH_LOCAL_MUSIC);    }    /**     * 为ListView填充数据     * @return     */    private void filledData(){        for(int i=0; i<searchList.size(); i++){            //汉字转换成拼音            String pinyin = characterParser.getSelling(searchList.get(i).title);            String sortString = pinyin.substring(0, 1).toUpperCase();            // 正则表达式，判断首字母是否是英文字母            if(sortString.matches("[A-Z]")){                searchList.get(i).sortLetters = sortString.toUpperCase();            }else{                searchList.get(i).sortLetters = "#";            }        }    }    /**     * 根据输入框中的值来过滤数据并更新ListView     * @param filterStr     */    private void filterData(String filterStr){        List<MusicData> filterDateList = new ArrayList<MusicData>();        if(TextUtils.isEmpty(filterStr)){            filterDateList = searchList;        }else{            filterDateList.clear();            for(MusicData sortModel : searchList){                String name = sortModel.title;                if(name.indexOf(filterStr.toString()) != -1 || characterParser.getSelling(name).startsWith(filterStr.toString())){                    filterDateList.add(sortModel);                }            }        }        // 根据a-z进行排序        Collections.sort(filterDateList, pinyinComparator);        musicLocalAdapter.updateListView(filterDateList);    }    @Override    public void update(Observable observable, Object data) {        if (data instanceof Bundle) {            Bundle bundle = (Bundle) data;            int action = bundle.getInt(Constant.ACTION_KEY);            if (action == Constant.Action.SEARCH_MUSIC) {                int msg = bundle.getInt(Constant.REQUEST_MSG_KEY);                int status = bundle.getInt(Constant.STATUS_KEY);                searchList = (List<MusicData>) bundle.getSerializable(Constant.INTENT_DATA);                if (msg == Constant.Msg.SEARCH_LOCAL_MUSIC) {                    switch (status) {                        case Constant.Msg.SEARCH_SUCCESS:                            mHandler.sendEmptyMessage(Constant.Msg.SEARCH_SUCCESS);                            break;                        case Constant.Msg.SEARCH_ERROR:                            mHandler.sendEmptyMessage(Constant.Msg.SEARCH_ERROR);                            break;                    }                }            } else if (action == Constant.Action.UPDATE_CURRENT_POSITION) {                int position = bundle.getInt(Constant.POSITION_KEY);                Message msg = new Message();                msg.what = Constant.Action.UPDATE_CURRENT_POSITION;                msg.arg1 = position;                mHandler.sendMessage(msg);            }        } else if (data instanceof Integer) {            int action = (int) data;            if (action == Constant.Action.CLEAR_ALL_MUSIC) {                mHandler.sendEmptyMessage(Constant.Action.CLEAR_ALL_MUSIC);            } else if (action == Constant.Action.CLEAR_LIST_FOCUS) {                mHandler.sendEmptyMessage(Constant.Action.CLEAR_LIST_FOCUS);            }        }    }    @Override    public void onDestroy() {        DataObservable.getInstance().deleteObserver(this);        if (mHttpRequestHelper != null) {            mHttpRequestHelper.onDestroy();        }        super.onDestroy();    }    @Override    public void onTouchingLetterChanged(String s) {        if (searchList != null && searchList.size() >= 0) {            //该字母首次出现的位置            int position = musicLocalAdapter.getPositionForSection(s.charAt(0));            if(position != -1){                mLvMusic.setSelection(position);            }        }    }    @Override    public void beforeTextChanged(CharSequence s, int start, int count, int after) {    }    @Override    public void onTextChanged(CharSequence s, int start, int before, int count) {        //当输入框里面的值为空，更新为原来的列表，否则为过滤数据列表        if (searchList != null && searchList.size() > 0) {            filterData(s.toString());        }    }    @Override    public void afterTextChanged(Editable s) {    }    @Override    public void onItemClick(AdapterView<?> parent, View view, int position, long id) {        if (searchList != null && searchList.size() > 0) {            if (position < searchList.size()) {                PlayModule.getInstance(getActivity()).play(position);                DataObservable.getInstance().setData(view.findViewById(R.id.tv_title));                musicLocalAdapter.setCurrentPosition(position);            }        }    }    @Override    public void OnMoreClick(int position) {        final MusicData music = searchList.get(position);        AlertDialog.Builder dialog = new AlertDialog.Builder(getActivity());        dialog.setTitle(music.title);        int itemsId =  R.array.local_music_dialog;        dialog.setItems(itemsId, new DialogInterface.OnClickListener() {            @Override            public void onClick(DialogInterface dialog, int which) {                switch (which) {                    case 0:// 分享                        shareMusic(music);                        break;                    case 1:// 设为铃声                        setRingtone(music);                        break;                    case 2:// 删除                        deleteMusic(music);                        break;                }            }        });        dialog.show();    }    /**     * 分享音乐     */    private void shareMusic(MusicData music) {        File file = new File(music.data);        Intent intent = new Intent(Intent.ACTION_SEND);        intent.setType("audio/*");        intent.putExtra(Intent.EXTRA_STREAM, Uri.fromFile(file));        startActivity(Intent.createChooser(intent, getString(R.string.share)));    }    /**     * 设置铃声     */    private void setRingtone(MusicData music) {        Uri uri = MediaStore.Audio.Media.getContentUriForPath(music.data);        // 查询音乐文件在媒体库是否存在        Cursor cursor = getActivity().getContentResolver().query(uri, null,                MediaStore.MediaColumns.DATA + "=?", new String[]{music.data}, null);        if (cursor == null) {            return;        }        if (cursor.moveToFirst() && cursor.getCount() > 0) {            String _id = cursor.getString(0);            ContentValues values = new ContentValues();            values.put(MediaStore.Audio.Media.IS_MUSIC, true);            values.put(MediaStore.Audio.Media.IS_RINGTONE, true);            values.put(MediaStore.Audio.Media.IS_ALARM, false);            values.put(MediaStore.Audio.Media.IS_NOTIFICATION, false);            values.put(MediaStore.Audio.Media.IS_PODCAST, false);            getActivity().getContentResolver().update(uri, values, MediaStore.MediaColumns.DATA +                    "=?", new String[]{music.data});            Uri newUri = ContentUris.withAppendedId(uri, Long.valueOf(_id));            RingtoneManager.setActualDefaultRingtoneUri(getActivity(),                    RingtoneManager.TYPE_RINGTONE, newUri);            Toast.makeText(getActivity(),"设置铃声成功！",Toast.LENGTH_SHORT).show();        }        cursor.close();    }    /**     * 删除音乐     */    private void deleteMusic(final MusicData music) {        AlertDialog.Builder dialog = new AlertDialog.Builder(getActivity());        String title = music.title;        String msg = getString(R.string.delete_music, title);        dialog.setMessage(msg);        dialog.setPositiveButton("删除", new DialogInterface.OnClickListener() {            @Override            public void onClick(DialogInterface dialog, int which) {                File file = new File(music.data);                if (file.delete()) {                    searchList.remove(music);                    musicLocalAdapter.notifyDataSetChanged();                    // 刷新媒体库                    Intent intent = new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE, Uri.parse("file://" + music.data));                    getActivity().sendBroadcast(intent);                }            }        });        dialog.setNegativeButton("取消", null);        dialog.show();    }}