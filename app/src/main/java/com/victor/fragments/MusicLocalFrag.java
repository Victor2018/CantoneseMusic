package com.victor.fragments;import android.content.Context;import android.content.Intent;import android.os.Bundle;import android.os.Handler;import android.os.Message;import android.support.annotation.Nullable;import android.support.v4.app.Fragment;import android.support.v7.widget.LinearLayoutManager;import android.support.v7.widget.RecyclerView;import android.text.Editable;import android.text.TextUtils;import android.text.TextWatcher;import android.util.Log;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.AdapterView;import android.widget.ListView;import android.widget.TextView;import android.widget.Toast;import com.victor.adapter.MusicLocalAdapter;import com.victor.adapter.MusicSearchAdapter;import com.victor.data.MusicData;import com.victor.module.DataObservable;import com.victor.module.HttpRequestHelper;import com.victor.music.R;import com.victor.util.CharacterParser;import com.victor.util.Constant;import com.victor.util.PinyinComparator;import com.victor.view.ClearEditText;import com.victor.view.SideBar;import java.util.ArrayList;import java.util.Collections;import java.util.List;import java.util.Observable;import java.util.Observer;/** * Created by victor on 2016/7/7. */public class MusicLocalFrag extends Fragment implements AdapterView.OnItemClickListener,        SideBar.OnTouchingLetterChangedListener,TextWatcher,Observer{    private String TAG = "MusicLocalFrag";    private Context mContext;    private ListView mLvMusic;    private MusicLocalAdapter musicLocalAdapter;    private List<MusicData> searchList = new ArrayList<>();    private MusicData musicData;    private HttpRequestHelper mHttpRequestHelper;    private SideBar sideBar;    private TextView dialog;    private ClearEditText mClearEditText;    /**     * 汉字转换成拼音的类     */    private CharacterParser characterParser;    /**     * 根据拼音来排列ListView里面的数据类     */    private PinyinComparator pinyinComparator;    Handler mHandler = new Handler(){        @Override        public void handleMessage(Message msg) {            switch (msg.what) {                case Constant.Msg.SEARCH_SUCCESS:                    if (searchList != null && searchList.size() > 0) {                        // 根据a-z进行排序源数据                        filledData();                        Collections.sort(searchList, pinyinComparator);                    }                    musicLocalAdapter.setMusicDatas(searchList);                    musicLocalAdapter.notifyDataSetChanged();                    break;                case Constant.Msg.SEARCH_ERROR:                    Toast.makeText(mContext,"Sorroy,Not Search Music!",Toast.LENGTH_SHORT).show();                    musicLocalAdapter.setMusicDatas(searchList);                    musicLocalAdapter.notifyDataSetChanged();                    break;            }        }    };    @Nullable    @Override    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {        View view = inflater.inflate(R.layout.frag_local_music,container, false);        initialize(view);        initData();        return view;    }    private void initialize (View view) {        mContext = getActivity();        DataObservable.getInstance().addObserver(this);        mHttpRequestHelper = new HttpRequestHelper(mContext);        //实例化汉字转拼音类        characterParser = CharacterParser.getInstance();        pinyinComparator = new PinyinComparator();        sideBar = (SideBar) view.findViewById(R.id.sidrbar);        dialog = (TextView) view.findViewById(R.id.dialog);        sideBar.setTextView(dialog);        mClearEditText = (ClearEditText) view.findViewById(R.id.filter_edit);        mLvMusic = (ListView) view.findViewById(R.id.lv_music);        musicLocalAdapter = new MusicLocalAdapter(getContext());        musicLocalAdapter.setMusicDatas(searchList);        mLvMusic.setAdapter(musicLocalAdapter);        //设置右侧触摸监听        sideBar.setOnTouchingLetterChangedListener(this);        mLvMusic.setOnItemClickListener(this);        //根据输入框输入值的改变来过滤搜索        mClearEditText.addTextChangedListener(this);    }    private void initData () {        mHttpRequestHelper.sendRequest(Constant.Msg.SEARCH_LOCAL_MUSIC);    }    /**     * 为ListView填充数据     * @return     */    private void filledData(){        for(int i=0; i<searchList.size(); i++){            //汉字转换成拼音            String pinyin = characterParser.getSelling(searchList.get(i).title);            String sortString = pinyin.substring(0, 1).toUpperCase();            // 正则表达式，判断首字母是否是英文字母            if(sortString.matches("[A-Z]")){                searchList.get(i).sortLetters = sortString.toUpperCase();            }else{                searchList.get(i).sortLetters = "#";            }        }    }    /**     * 根据输入框中的值来过滤数据并更新ListView     * @param filterStr     */    private void filterData(String filterStr){        List<MusicData> filterDateList = new ArrayList<MusicData>();        if(TextUtils.isEmpty(filterStr)){            filterDateList = searchList;        }else{            filterDateList.clear();            for(MusicData sortModel : searchList){                String name = sortModel.title;                if(name.indexOf(filterStr.toString()) != -1 || characterParser.getSelling(name).startsWith(filterStr.toString())){                    filterDateList.add(sortModel);                }            }        }        // 根据a-z进行排序        Collections.sort(filterDateList, pinyinComparator);        musicLocalAdapter.updateListView(filterDateList);    }    private void play(int position) {        Log.e(TAG,"play()......");        musicData = searchList.get(position);        musicData.playStatus = Constant.PlayStatus.PLAY;        musicData.action = Constant.Action.SHOW_CURRENT_PLAY;        DataObservable.getInstance().setData(musicData);        Intent intent = new Intent();        intent.setAction("com.app.media.MUSIC_SERVICE");        intent.putExtra("PLAY_ACTION", Constant.Action.PLAY);        intent.putExtra("PLAY_URL", musicData.data);        intent.setPackage(getActivity().getPackageName());        getActivity().startService(intent);    }    @Override    public void update(Observable observable, Object data) {        if (data instanceof Bundle) {            Bundle bundle = (Bundle) data;            int msg = bundle.getInt(Constant.REQUEST_MSG_KEY);            int status = bundle.getInt(Constant.STATUS_KEY);            searchList = (List<MusicData>) bundle.getSerializable(Constant.INTENT_DATA);            if (msg == Constant.Msg.SEARCH_LOCAL_MUSIC) {                switch (status) {                    case Constant.Msg.SEARCH_SUCCESS:                        mHandler.sendEmptyMessage(Constant.Msg.SEARCH_SUCCESS);                        break;                    case Constant.Msg.SEARCH_ERROR:                        mHandler.sendEmptyMessage(Constant.Msg.SEARCH_ERROR);                        break;                }            }        }    }    @Override    public void onDestroy() {        DataObservable.getInstance().deleteObserver(this);        if (mHttpRequestHelper != null) {            mHttpRequestHelper.onDestroy();        }        super.onDestroy();    }    @Override    public void onTouchingLetterChanged(String s) {        if (searchList != null && searchList.size() >= 0) {            //该字母首次出现的位置            int position = musicLocalAdapter.getPositionForSection(s.charAt(0));            if(position != -1){                mLvMusic.setSelection(position);            }        }    }    @Override    public void beforeTextChanged(CharSequence s, int start, int count, int after) {    }    @Override    public void onTextChanged(CharSequence s, int start, int before, int count) {        //当输入框里面的值为空，更新为原来的列表，否则为过滤数据列表        if (searchList != null && searchList.size() > 0) {            filterData(s.toString());        }    }    @Override    public void afterTextChanged(Editable s) {    }    @Override    public void onItemClick(AdapterView<?> parent, View view, int position, long id) {        if (searchList != null && searchList.size() > 0) {            if (position < searchList.size()) {                play(position);            }        }    }}