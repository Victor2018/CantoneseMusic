package com.victor.module;import android.util.Log;import com.victor.data.LrcData;import com.victor.data.MusicData;import com.victor.util.Constant;import com.victor.util.FileUtil;import com.victor.util.JsonParser;import com.victor.util.Loger;import org.json.JSONException;import java.util.List;/** * 如果本地歌曲没有歌词则从网络搜索歌词 */public class SearchLrc {    private String TAG = "SearchLrc";    private static SearchLrc mSearchLrc;    private OnCompleteListener mOnCompleteListener;    public interface OnCompleteListener {        void onComplete (int status);    }    public void setOnCompleteListener (OnCompleteListener listener) {        mOnCompleteListener = listener;    }    public static SearchLrc getInstance () {        if (mSearchLrc == null) {            mSearchLrc = new SearchLrc();        }        return mSearchLrc;    }    /**     * @param keyword title-aritist     */    public void searchLrc(String keyword) {        String url = String.format(Constant.MUSIC_SEARCH_URL,keyword);        HttpRequestModule.request(TAG, url, new HttpRequestModule.OnCompleteListener() {            @Override            public void onComplete(int status, Object result) {                if (status != 1) {                    if (mOnCompleteListener != null) {                        mOnCompleteListener.onComplete(0);                    }                    return;                }                try {                    List<MusicData> searchList = JsonParser.parseSearchMusics(result.toString());                    if (searchList == null || searchList.size() == 0) {                        if (mOnCompleteListener != null) {                            mOnCompleteListener.onComplete(0);                            return;                        }                    }                    downloadLrc(searchList.get(0));                } catch (JSONException e) {                    e.printStackTrace();                }            }        });    }    private void downloadLrc(final MusicData data) {        String url = String.format(Constant.MUSIC_LRC_URL,data.song_id);        Loger.e(TAG,"downloadLrc-url = " + url);        HttpRequestModule.request(TAG, url, new HttpRequestModule.OnCompleteListener() {            @Override            public void onComplete(int status, Object result) {                if (status == 1) {                    try {                        LrcData info = JsonParser.parseLrc(result.toString());                        if (info != null) {                            String lrcPath = FileUtil.getLrcDir() + FileUtil.getLrcFileName(data.artist,data.title);                            FileUtil.saveLrcFile(lrcPath,info.lrcContent);                            if (mOnCompleteListener != null) {                                mOnCompleteListener.onComplete(1);                            }                        } else {                            if (mOnCompleteListener != null) {                                mOnCompleteListener.onComplete(0);                            }                        }                    } catch (JSONException e) {                        e.printStackTrace();                        if (mOnCompleteListener != null) {                            mOnCompleteListener.onComplete(0);                        }                    }                } else {                    if (mOnCompleteListener != null) {                        mOnCompleteListener.onComplete(0);                    }                }            }        });    }}