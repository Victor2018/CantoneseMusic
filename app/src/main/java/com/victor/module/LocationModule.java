package com.victor.module;import android.content.Context;import android.content.pm.PackageInfo;import android.content.pm.PackageManager;import android.os.Handler;import com.amap.api.location.AMapLocationClient;import com.amap.api.location.AMapLocationClientOption;import com.amap.api.location.AMapLocationListener;import com.amap.api.maps.AMap;import com.victor.util.Constant;import com.victor.util.Loger;import java.security.MessageDigest;import java.security.NoSuchAlgorithmException;import java.util.Locale;/** * Created by victor on 2016/8/17. */public class LocationModule {    private String TAG = "LocationModule";    private Context mContext;    private static LocationModule mLocationModule;    private AMapLocationClient locationClient = null;    private AMapLocationClientOption locationOption = null;    private AMapLocationListener mAMapLocationListener;    private Handler mHandler;    public LocationModule (Context context,AMapLocationListener listener,Handler handler) {        mContext = context;        mHandler = handler;        if (listener == null) {            return;        }        init(listener);    }    public static LocationModule getInstance (Context context,AMapLocationListener listener,Handler handler) {        if (mLocationModule == null) {            mLocationModule = new LocationModule(context,listener,handler);        }        return mLocationModule;    }    public void init(AMapLocationListener listener) {        mAMapLocationListener = listener;        locationClient = new AMapLocationClient(mContext);        locationOption = new AMapLocationClientOption();        // 设置定位模式为高精度模式        locationOption.setLocationMode(AMapLocationClientOption.AMapLocationMode.Hight_Accuracy);        // 设置定位监听        if (mAMapLocationListener != null) {            locationClient.setLocationListener(mAMapLocationListener);        }        initOption();    }    // 根据控件的选择，重新设置定位参数    private void initOption() {        // 设置是否需要显示地址信息        locationOption.setNeedAddress(true);        /**         * 设置是否优先返回GPS定位结果，如果30秒内GPS没有返回定位结果则进行网络定位         * 注意：只有在高精度模式下的单次定位有效，其他方式无效         */        locationOption.setGpsFirst(false);        // 设置是否开启缓存        locationOption.setLocationCacheEnable(true);        //设置是否等待设备wifi刷新，如果设置为true,会自动变为单次定位，持续定位时不要使用        locationOption.setOnceLocationLatest(false);        // 设置发送定位请求的时间间隔,最小值为1000，如果小于1000，按照1000算        locationOption.setInterval(5000);    }    /**     * @param context     * @return     * 获取SHA1     */    public String getSHA1(Context context) {        try {            PackageInfo info = context.getPackageManager().getPackageInfo(                    context.getPackageName(), PackageManager.GET_SIGNATURES);            byte[] cert = info.signatures[0].toByteArray();            MessageDigest md = MessageDigest.getInstance("SHA1");            byte[] publicKey = md.digest(cert);            StringBuffer hexString = new StringBuffer();            for (int i = 0; i < publicKey.length; i++) {                String appendString = Integer.toHexString(0xFF & publicKey[i])                        .toUpperCase(Locale.US);                if (appendString.length() == 1)                    hexString.append("0");                hexString.append(appendString);                hexString.append(":");            }            String result = hexString.toString();            return result.substring(0, result.length()-1);        } catch (PackageManager.NameNotFoundException e) {            e.printStackTrace();        } catch (NoSuchAlgorithmException e) {            e.printStackTrace();        }        return null;    }    /**     * 开始定位     */    public void startLocation () {        if (locationClient == null) {            Loger.e(TAG,"startLocation() error locationClient is null");            return;        }        // 设置定位参数        locationClient.setLocationOption(locationOption);        // 启动定位        locationClient.startLocation();        if (mHandler != null) {            mHandler.sendEmptyMessage(Constant.Msg.MSG_LOCATION_START);        }    }    /**     * 停止定位     */    public void stopLocation() {        if (locationClient == null) {            Loger.e(TAG,"stopLocation() error locationClient is null");            return;        }        locationClient.stopLocation();        if (mHandler != null) {            mHandler.sendEmptyMessage(Constant.Msg.MSG_LOCATION_STOP);        }    }    public AMapLocationClient getLocationClient () {        return locationClient;    }    public void onDestroy () {        if (locationClient != null) {            locationClient.onDestroy();            locationClient = null;            locationOption = null;            mLocationModule = null;        }    }}