package com.victor.module;import android.content.Context;import android.os.Bundle;import android.os.Handler;import android.os.HandlerThread;import android.os.Message;import com.victor.interfaces.HttpRequestListener;import com.victor.util.Constant;import com.victor.util.HttpActions;import java.util.HashMap;/** * http请求处理 * Created by victor on 2016/1/21. */public class HttpRequestHelper {    private String TAG = "HttpRequestHelper";    private Context mContext;    private Handler mRequestHandler;    private HandlerThread mRequestHandlerThread;    public HttpRequestHelper(Context context) {        mContext = context;        startRequestTask ();    }    private void startRequestTask (){        mRequestHandlerThread = new HandlerThread("HttpRequestTask");        mRequestHandlerThread.start();        mRequestHandler = new Handler(mRequestHandlerThread.getLooper()){            @Override            public void handleMessage(Message msg) {                switch (msg.what) {                    case Constant.Msg.SEARCH_LOCAL_MUSIC:                        HttpActions.searchLocalMusic(mContext);                    	break;                    case Constant.Msg.REQUEST_CATEGORY:                    	HashMap<Integer,Object> categoryMap = (HashMap<Integer, Object>) msg.obj;                    	String categoryUrl = (String) categoryMap.get(Constant.Msg.REQUEST_CATEGORY);                    	HttpActions.requestCategory(categoryUrl,mContext);                    	break;                    case Constant.Msg.REQUEST_MUSIC:                    	HashMap<Integer,Object> requestMusicMap = (HashMap<Integer, Object>) msg.obj;                    	String songId = (String) requestMusicMap.get(Constant.Msg.REQUEST_MUSIC);                        String requestMusicUrl = String.format(Constant.MUSIC_PLAY_URL,songId);                    	HttpActions.requestMusic(requestMusicUrl,mContext);                    	break;                    case Constant.Msg.REQUEST_MUSICS:                    	HashMap<Integer,Object> requestMusicsMap = (HashMap<Integer, Object>) msg.obj;                    	Bundle bundle = (Bundle) requestMusicsMap.get(Constant.Msg.REQUEST_MUSICS);                        String type = bundle.getString(Constant.MUSIC_TYPE_KEY);                        int pageSize = bundle.getInt(Constant.PAGE_SIZE_KEY);                        int offset = bundle.getInt(Constant.OFF_SET_KEY);                        String url = String.format(Constant.MUSIC_URL,Constant.METHOD_MUSIC_LIST,type,pageSize,offset);                    	HttpActions.requestMusics(url,mContext);                    	break;                }            }        };    }    public void sendRequestWithParms (int Msg,Object requestData) {    	HashMap<Integer, Object> requestMap = new HashMap<Integer, Object>();    	requestMap.put(Msg, requestData);    	Message msg = mRequestHandler.obtainMessage(Msg,requestMap);    	mRequestHandler.sendMessage(msg);    }    public void sendRequest (int msg) {    	mRequestHandler.sendEmptyMessage(msg);    }    public void onDestroy (){        if (mRequestHandlerThread != null) {            mRequestHandlerThread.quit();            mRequestHandlerThread = null;        }    }}