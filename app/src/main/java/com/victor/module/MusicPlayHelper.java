package com.victor.module;import android.content.Context;import android.media.MediaPlayer;import android.os.Bundle;import android.os.Handler;import android.os.HandlerThread;import android.os.Message;import android.text.TextUtils;import android.util.Log;import com.victor.util.Constant;import com.victor.util.HttpActions;import com.victor.util.Loger;import java.io.IOException;import java.util.HashMap;/** * 在线音乐播放 * Created by victor on 2016/1/21. */public class MusicPlayHelper {    private String TAG = "MusicPlayHelper";    private Context mContext;    private Handler mRequestHandler;    private HandlerThread mRequestHandlerThread;    private MediaPlayer mPlayer;    private String mLastPlayUrl = "";//上次播放url    public MusicPlayHelper(Context context, MediaPlayer player) {        mContext = context;        mPlayer = player;        startRequestTask ();    }    private void startRequestTask (){        mRequestHandlerThread = new HandlerThread("MusicPlayTask");        mRequestHandlerThread.start();        mRequestHandler = new Handler(mRequestHandlerThread.getLooper()){            @Override            public void handleMessage(Message msg) {                switch (msg.what) {                    case Constant.Msg.PLAY_MUSIC:                    	HashMap<Integer,Object> requestMusicMap = (HashMap<Integer, Object>) msg.obj;                    	String playUrl = (String) requestMusicMap.get(Constant.Msg.PLAY_MUSIC);                    	play (playUrl);                    	break;                }            }        };    }    public void sendRequestWithParms (int Msg,Object requestData) {    	HashMap<Integer, Object> requestMap = new HashMap<Integer, Object>();    	requestMap.put(Msg, requestData);    	Message msg = mRequestHandler.obtainMessage(Msg,requestMap);    	mRequestHandler.sendMessage(msg);    }    public void sendRequest (int msg) {    	mRequestHandler.sendEmptyMessage(msg);    }    private void play (String playUrl) {        Loger.e(TAG,"play-playUrl = " + playUrl);        if (TextUtils.isEmpty(playUrl)) {            Log.e(TAG,"playUrl is empty!!!!");            return;        }        Log.e(TAG,"play()......playUrl = " + playUrl);        if (mLastPlayUrl.equals(playUrl) && !mPlayer.isPlaying()) {            mPlayer.start();            return;        }        mLastPlayUrl = playUrl;        try {            mPlayer.reset();            mPlayer.setDataSource(playUrl);            mPlayer.prepare();            mPlayer.start();        } catch (IllegalArgumentException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (IllegalStateException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (IOException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }    }    public void onDestroy (){        if (mRequestHandlerThread != null) {            mRequestHandlerThread.quit();            mRequestHandlerThread = null;        }    }}