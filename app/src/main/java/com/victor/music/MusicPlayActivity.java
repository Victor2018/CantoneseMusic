package com.victor.music;import android.graphics.Bitmap;import android.graphics.Color;import android.graphics.drawable.BitmapDrawable;import android.os.Build;import android.os.Handler;import android.os.Message;import android.support.annotation.Nullable;import android.support.v7.app.AppCompatActivity;import android.os.Bundle;import android.support.v7.widget.Toolbar;import android.view.View;import android.view.Window;import android.view.WindowManager;import android.widget.ImageButton;import android.widget.ImageView;import android.widget.SeekBar;import android.widget.TextView;import com.bumptech.glide.Glide;import com.bumptech.glide.request.animation.GlideAnimation;import com.bumptech.glide.request.target.SimpleTarget;import com.victor.dao.DbDao;import com.victor.data.MusicData;import com.victor.module.DataObservable;import com.victor.module.PlayModule;import com.victor.module.SearchLrc;import com.victor.util.ChineseUtil;import com.victor.util.Constant;import com.victor.util.DateUtil;import com.victor.util.FileUtil;import com.victor.util.Loger;import com.victor.util.SharePreferencesUtil;import com.victor.view.LrcView;import com.victor.view.MediaPlayView;import java.io.File;import java.util.List;import java.util.Observable;import java.util.Observer;public class MusicPlayActivity extends AppCompatActivity implements View.OnClickListener,SeekBar.OnSeekBarChangeListener,Observer {    private String TAG = "MusicPlayActivity";    private Toolbar toolbar;    private MediaPlayView mMpvPlay;    private ImageButton mIbPrev,mIbPlay,mIbNext;    private SeekBar mSbProgress;    private TextView mTvCurrent,mTvDuration;    private LrcView mLrcViewSingle;    private MusicData musicData;    Handler mHandler = new Handler(){        @Override        public void handleMessage(Message msg) {            switch (msg.what) {                case 0x111:                    mIbPlay.setImageResource(R.drawable.btn_play_selector);                    break;                case 0x112:                    mIbPlay.setImageResource(R.drawable.btn_pause_selector);                    break;                case Constant.Msg.UPDATE_PLAY_PROGRESS:                    MusicData info = (MusicData) msg.obj;                    mSbProgress.setMax((int) info.duration);                    mSbProgress.setProgress(info.current);                    mTvCurrent.setText(DateUtil.formatTime((long) info.current));                    mTvDuration.setText(DateUtil.formatTime(info.duration));                    String title = info.title;                    if (ChineseUtil.isMessyCode(title)) {                        title = musicData.data.substring(info.data.lastIndexOf("/") + 1, info.data.length());                    }                    toolbar.setTitle(title);                    toolbar.setTitleTextColor(Color.WHITE);                    toolbar.setSubtitle(info.artist);                    if (info.artist.equals("<unknown>")) {                        toolbar.setSubtitle("未知艺术家");                    }                    toolbar.setSubtitleTextColor(Color.WHITE);                    if (mLrcViewSingle.hasLrc()) {                        mLrcViewSingle.updateTime(info.current);                    }                    break;                case Constant.Action.SHOW_CURRENT_PLAY:                    searchLrc(musicData);                    break;            }        }    };    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_music_play);        initialize();        initData();    }    private void initialize () {        DataObservable.getInstance().addObserver(this);        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {            Window window = getWindow();            window.clearFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);            window.getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION);            window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS);            window.setStatusBarColor(Color.TRANSPARENT);        }        toolbar = (Toolbar) findViewById(R.id.toolbar);        mMpvPlay = (MediaPlayView) findViewById(R.id.mpv);        mMpvPlay.setUiHandler(mHandler);        mIbPrev = (ImageButton) findViewById(R.id.ib_prev);        mIbPlay = (ImageButton) findViewById(R.id.ib_play);        mIbNext = (ImageButton) findViewById(R.id.ib_next);        mSbProgress = (SeekBar) findViewById(R.id.seekBar);        mTvCurrent = (TextView) findViewById(R.id.tv_current);        mTvDuration = (TextView) findViewById(R.id.tv_duration);        mLrcViewSingle = (LrcView) findViewById(R.id.lrc_view_single);        mIbPrev.setOnClickListener(this);        mIbPlay.setOnClickListener(this);        mIbNext.setOnClickListener(this);        mSbProgress.setOnSeekBarChangeListener(this);    }    private void initData () {        List<MusicData> currentList = DbDao.getInstance(this).queryMusic(Constant.TB.MUSIC_CURRENT);        if (currentList != null && currentList.size() > 0) {            musicData = currentList.get(0);            String title = musicData.title;            if (ChineseUtil.isMessyCode(title)) {                title = musicData.data.substring(musicData.data.lastIndexOf("/") + 1, musicData.data.length());            }            toolbar.setTitle(title);            toolbar.setTitleTextColor(Color.WHITE);            toolbar.setSubtitle(musicData.artist);            if (musicData.artist.equals("<unknown>")) {                toolbar.setSubtitle("未知艺术家");            }            toolbar.setSubtitleTextColor(Color.WHITE);            mSbProgress.setMax((int) musicData.duration);            mSbProgress.setProgress(musicData.current);            mTvCurrent.setText(DateUtil.formatTime((long) musicData.current));            mTvDuration.setText(DateUtil.formatTime(musicData.duration));            searchLrc(musicData);            if (PlayModule.getInstance(this).isPlaying()) {                mMpvPlay.play();            }            mMpvPlay.setCenterImg(((BitmapDrawable) getResources().getDrawable(R.mipmap.bg_disk_play)).getBitmap());            Glide.with(this).load(musicData.pic_small).asBitmap().centerCrop().error(R.mipmap.default_cover).into(new SimpleTarget<Bitmap>() {                @Override                public void onResourceReady(Bitmap resource, GlideAnimation<? super Bitmap> glideAnimation) {                    if (resource != null) {                        mMpvPlay.setCenterImg(resource);                    }                }            }); //方法中设置asBitmap可以设置回调类型        }    }    private void searchLrc (final MusicData data) {        Loger.e(TAG,"searchLrc()...");        if (data == null) {            Loger.e(TAG,"searchLrc()...data == null");            return;        }        String lrcPath = FileUtil.getLrcFilePath(data);        File file = new File(lrcPath);        if (file.exists()) {            loadLrc(lrcPath);        } else {            loadLrc(lrcPath);            // 设置tag防止歌词下载完成后已切换歌曲            mLrcViewSingle.setTag(data);            //从网络搜索lrc歌词            SearchLrc.getInstance().searchLrc(data.artist + "-" + data.title);            SearchLrc.getInstance().setOnCompleteListener(new SearchLrc.OnCompleteListener() {                @Override                public void onComplete(int status) {                    if (status == 1) {                        if (mLrcViewSingle.getTag() == data) {                            String lrcPath = FileUtil.getLrcFilePath(data);                            loadLrc(lrcPath);                        }                    }                }            });        }    }    private void loadLrc(String path) {        mLrcViewSingle.loadLrc(path);        // 清除tag        mLrcViewSingle.setTag(null);    }    @Override    public void onClick(View v) {        switch (v.getId()) {            case R.id.ib_prev:                mMpvPlay.prev();                PlayModule.getInstance(this).prev();                break;            case R.id.ib_play:                if (mMpvPlay.isPlay()) {                    mMpvPlay.pause();                    PlayModule.getInstance(this).pause();                } else {                    mMpvPlay.play();                    if ( PlayModule.getInstance(this).isPlayOnline()) {                        List<MusicData> onlineList = DbDao.getInstance(this).queryMusic(Constant.TB.MUSIC_ONLINE);                        if (onlineList != null && onlineList.size() > 0) {                            PlayModule.getInstance(this).playOnline(onlineList.get(0));                        }                    } else {                        int current = SharePreferencesUtil.getInt(this, Constant.CURRENT_POSITION_KEY);                        PlayModule.getInstance(this).play(current);                    }                }                break;            case R.id.ib_next:                mMpvPlay.next();                PlayModule.getInstance(this).next();                break;        }    }    @Override    public void update(Observable observable, Object data) {        if (data instanceof MusicData) {            MusicData info = (MusicData) data;            int action = info.action;            if (action == Constant.Msg.UPDATE_PLAY_PROGRESS) {                Message msg = mHandler.obtainMessage(Constant.Msg.UPDATE_PLAY_PROGRESS,info);                msg.sendToTarget();            } else if (action == Constant.Action.SHOW_CURRENT_PLAY) {                musicData = info;                mHandler.sendEmptyMessage(Constant.Action.SHOW_CURRENT_PLAY);            }        }    }    @Override    protected void onDestroy() {        DataObservable.getInstance().deleteObserver(this);        super.onDestroy();    }    @Override    public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {    }    @Override    public void onStartTrackingTouch(SeekBar seekBar) {    }    @Override    public void onStopTrackingTouch(SeekBar seekBar) {        int msec = seekBar.getProgress();        PlayModule.getInstance(this).seekTo(msec);        mLrcViewSingle.onDrag(msec);    }}