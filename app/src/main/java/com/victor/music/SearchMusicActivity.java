package com.victor.music;import android.content.DialogInterface;import android.content.Intent;import android.os.Bundle;import android.os.Handler;import android.os.Message;import android.support.v7.app.AlertDialog;import android.support.v7.app.AppCompatActivity;import android.support.v7.widget.LinearLayoutManager;import android.support.v7.widget.RecyclerView;import android.support.v7.widget.SearchView;import android.support.v7.widget.Toolbar;import android.text.TextUtils;import android.util.Log;import android.view.Menu;import android.view.MenuItem;import android.view.View;import android.widget.AdapterView;import android.widget.ImageView;import android.widget.TextView;import android.widget.Toast;import com.victor.adapter.MusicDetailAdapter;import com.victor.adapter.MusicSearchAdapter;import com.victor.data.MusicData;import com.victor.module.DataObservable;import com.victor.module.HttpRequestModule;import com.victor.module.PlayModule;import com.victor.util.Constant;import com.victor.util.DownLoadUtil;import com.victor.util.FileUtil;import com.victor.util.JsonParser;import com.victor.view.SpotsLoadingDlg;import com.victor.view.SweetAlertDialog;import org.json.JSONException;import java.io.File;import java.lang.reflect.Field;import java.util.ArrayList;import java.util.List;public class SearchMusicActivity extends AppCompatActivity implements SearchView.OnQueryTextListener,        MusicSearchAdapter.OnItemClickListener,MusicSearchAdapter.OnMoreClickListener {    private String TAG = "SearchMusicActivity";    private Toolbar toolbar;    private RecyclerView mRecyclerView;    private LinearLayoutManager linearLayoutManager;    private MusicSearchAdapter musicSearchAdapter;    private List<MusicData> searchList = new ArrayList<>();    private MusicData musicData;    private MusicData downLoadInfo;    private SpotsLoadingDlg mSpotsLoadingDlg;    private SweetAlertDialog mSweetAlertDialog;    private int currentPosition = -1;    Handler mHandler = new Handler(){        @Override        public void handleMessage(Message msg) {            switch (msg.what) {                case Constant.Msg.UPDATE_MUSIC_LIST:                    mSpotsLoadingDlg.dismiss();                    musicSearchAdapter.setMusicDatas(searchList);                    musicSearchAdapter.notifyDataSetChanged();                    break;                case Constant.Msg.SEARCH_MUSIC_ERROR:                    mSpotsLoadingDlg.dismiss();                    showTipDlg("没有搜索到音乐！");                    break;                case Constant.Action.PLAY:                    mSpotsLoadingDlg.dismiss();                    if (musicData != null) {                        PlayModule.getInstance(getApplicationContext()).playOnline(musicData);                    }                    break;                case Constant.Action.DOWNLOAD:                    mSpotsLoadingDlg.dismiss();                    if (downLoadInfo != null) {                        Toast.makeText(getApplicationContext(),"正在后台下载 " + downLoadInfo.title,Toast.LENGTH_SHORT).show();                        DownLoadUtil.getInstance().downLoad(downLoadInfo);                    }                    break;            }        }    };    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_search_music);        toolbar = (Toolbar) findViewById(R.id.toolbar);        setSupportActionBar(toolbar);        getSupportActionBar().setDisplayHomeAsUpEnabled(true);        initialize();    }    private void initialize () {        mSpotsLoadingDlg = new SpotsLoadingDlg(this);        mRecyclerView = (RecyclerView) findViewById(R.id.recycler_view);        linearLayoutManager = new LinearLayoutManager(this);//这里用线性显示 类似于listview        mRecyclerView.setLayoutManager(linearLayoutManager);        musicSearchAdapter = new MusicSearchAdapter(getApplicationContext(),this,this);        musicSearchAdapter.setHeaderVisible(false);        musicSearchAdapter.setFooterVisible(false);        musicSearchAdapter.setMusicDatas(searchList);        mRecyclerView.setAdapter(musicSearchAdapter);    }    @Override    public boolean onCreateOptionsMenu(Menu menu) {        getMenuInflater().inflate(R.menu.menu_search_music, menu);        SearchView searchView = (SearchView) menu.findItem(R.id.action_search).getActionView();//        TextView textView = (TextView) searchView.findViewById(R.id.search_src_text);//        textView.setTextColor(getResources().getColor(R.color.black));//        textView.setHighlightColor(getResources().getColor(R.color.black));//        textView.setCursorVisible(true);        searchView.setMaxWidth(Integer.MAX_VALUE);        searchView.onActionViewExpanded();        searchView.setQueryHint(getString(R.string.search_tips));        searchView.setOnQueryTextListener(this);        searchView.setSubmitButtonEnabled(true);        try {            Field field = searchView.getClass().getDeclaredField("mGoButton");            field.setAccessible(true);            ImageView mGoButton = (ImageView) field.get(searchView);            mGoButton.setImageResource(R.mipmap.ic_menu_search);        } catch (Exception e) {            e.printStackTrace();        }        return super.onCreateOptionsMenu(menu);    }    @Override    public boolean onOptionsItemSelected(MenuItem item) {        switch (item.getItemId()) {            case android.R.id.home:                finish();                return true;            default:                return super.onOptionsItemSelected(item);        }    }    @Override    public boolean onQueryTextSubmit(String query) {        searchMusic(query);        return false;    }    @Override    public boolean onQueryTextChange(String newText) {        return false;    }    private void searchMusic(String keyword) {        mSpotsLoadingDlg.setTip("拼命加载中...");        mSpotsLoadingDlg.show();        String url = String.format(Constant.MUSIC_SEARCH_URL,keyword);        HttpRequestModule.request(TAG, url, new HttpRequestModule.OnCompleteListener() {            @Override            public void onComplete(int status, Object result) {                if (status != 1) {                    mHandler.sendEmptyMessage(Constant.Msg.SEARCH_MUSIC_ERROR);                    return;                }                try {                    searchList = JsonParser.parseSearchMusics(result.toString());                    mHandler.sendEmptyMessage(Constant.Msg.UPDATE_MUSIC_LIST);                } catch (JSONException e) {                    e.printStackTrace();                }            }        });    }    @Override    protected void onDestroy() {        super.onDestroy();    }    @Override    public void OnItemClick(int position) {        getMusicInfo(position,Constant.Action.PLAY);    }    @Override    public void OnMoreClick(final int position) {        final MusicData info = searchList.get(position);        AlertDialog.Builder dialog = new AlertDialog.Builder(this);        dialog.setTitle(info.title);        String path = FileUtil.getMusicDir() + FileUtil.getMp3FileName(info.artist, info.title);        File file = new File(path);        int itemsId = file.exists() ? R.array.online_music_dialog_without_download : R.array.online_music_dialog;        dialog.setItems(itemsId, new DialogInterface.OnClickListener() {            @Override            public void onClick(DialogInterface dialog, int which) {                switch (which) {                    case 0:// 分享                        break;                    case 1:// 查看歌手信息                        break;                    case 2:// 下载                        if (currentPosition == position && musicData != null) {                            downLoadInfo = musicData;                            mHandler.sendEmptyMessage(Constant.Action.DOWNLOAD);                            return;                        }                        getMusicInfo(position,Constant.Action.DOWNLOAD);                        break;                }            }        });        dialog.show();    }    private void getMusicInfo (final int position,final int action) {        if (searchList != null && searchList.size() > 0) {            if (position < searchList.size()) {                mSpotsLoadingDlg.setTip("拼命加载中...");                mSpotsLoadingDlg.show();//                mHttpRequestHelper.sendRequestWithParms(Constant.Msg.REQUEST_MUSIC,musicDatas.get(position).song_id);                String url = String.format(Constant.MUSIC_PLAY_URL,searchList.get(position).song_id);                Log.e(TAG,"url = " + url);                HttpRequestModule.request(TAG, url, new HttpRequestModule.OnCompleteListener() {                    @Override                    public void onComplete(int status, Object result) {                        if (status == 1) {                            try {                                if (action == Constant.Action.PLAY) {                                    musicData = JsonParser.parseMusic(result.toString());                                    currentPosition = position;                                } else if (action == Constant.Action.DOWNLOAD) {                                    downLoadInfo = JsonParser.parseMusic(result.toString());                                }                                mHandler.sendEmptyMessage(action);                            } catch (JSONException e) {                                e.printStackTrace();                            }                        }                    }                });            }        }    }    private void showTipDlg (String msg) {        mSweetAlertDialog = new SweetAlertDialog(this);        mSweetAlertDialog.setTitleText("提示");        mSweetAlertDialog.setContentText(msg);        mSweetAlertDialog.showCancelBtn(false);        mSweetAlertDialog.setCancelable(false);        mSweetAlertDialog.setConfirmClickListener(new SweetAlertDialog.OnSweetClickListener() {            @Override            public void onClick(SweetAlertDialog sweetAlertDialog) {                // TODO Auto-generated method stub                mSweetAlertDialog.dismissWithAnimation();            }        });        mSweetAlertDialog.show();    }}