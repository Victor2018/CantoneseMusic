package com.victor.music;import android.app.PendingIntent;import android.content.BroadcastReceiver;import android.content.Context;import android.content.Intent;import android.content.IntentFilter;import android.net.ConnectivityManager;import android.os.Handler;import android.os.Message;import android.os.Bundle;import android.util.Log;import android.view.View;import android.widget.Toast;import com.amap.api.location.AMapLocation;import com.amap.api.location.AMapLocationListener;import com.amap.api.maps.AMap;import com.amap.api.maps.CameraUpdateFactory;import com.amap.api.maps.LocationSource;import com.amap.api.maps.MapView;import com.amap.api.maps.model.BitmapDescriptorFactory;import com.amap.api.maps.model.LatLng;import com.amap.api.maps.model.Marker;import com.amap.api.maps.model.MarkerOptions;import com.victor.module.LocationModule;import com.victor.util.Constant;import com.victor.util.Loger;/** * 高精度定位 */public class HightAccuracyActivity extends CheckPermissionsActivity implements        LocationSource,AMapLocationListener {    private String TAG = "HightAccuracyActivity";    private View view;    private MapView mMapView;    private AMap aMap;    private OnLocationChangedListener mListener = null;//定位监听器    // 用于接收地理围栏提醒的pendingIntent    private PendingIntent mPendingIntent = null;    public static final String GEOFENCE_BROADCAST_ACTION = "com.location.apis.geofencedemo.broadcast";    Handler mHandler = new Handler() {        public void dispatchMessage(android.os.Message msg) {            switch (msg.what) {                //开始定位                case Constant.Msg.MSG_LOCATION_START://                    view.setSystemUiVisibility(View.SYSTEM_UI_FLAG_VISIBLE);                    Toast.makeText(getApplication(),"正在定位...",Toast.LENGTH_SHORT).show();                    break;                // 定位完成                case Constant.Msg.MSG_LOCATION_FINISH://                    view.setSystemUiVisibility(View.SYSTEM_UI_FLAG_FULLSCREEN);                    AMapLocation loc = (AMapLocation) msg.obj;                    String result = Constant.getLocationStr(loc);                    if (loc != null && loc.getErrorCode() == 0) {                        Log.e(TAG,"----------------- 定位成功 ----------------------");                        mListener.onLocationChanged(loc);// 显示系统小蓝点                        addMarkerToMap(loc);                        if (null != LocationModule.getInstance(getApplicationContext(),null,mHandler).getLocationClient()) {                            float radius = 1000;                            // 添加地理围栏，                            // 第一个参数：围栏ID,可以自定义ID,示例中为了方便只使用一个ID;第二个：纬度；第三个：精度；                            // 第四个：半径；第五个：过期时间，单位毫秒，-1代表不过期；第六个：接收触发消息的PendingIntent                            LocationModule.getInstance(getApplicationContext(),null,mHandler).getLocationClient().addGeoFenceAlert("fenceId",                                    loc.getLatitude(), loc.getLongitude(),                                    radius, -1, mPendingIntent);                        }                    }                    break;                //停止定位                case Constant.Msg.MSG_LOCATION_STOP:                    Toast.makeText(getApplication(),"定位停止",Toast.LENGTH_SHORT).show();                    break;                case Constant.Msg.MSG_GEOFENCE_IN:                    Log.e(TAG,"进入围栏区域");                    break;                case Constant.Msg.MSG_GEOFENCE_OUT:                    Log.e(TAG,"离开围栏区域");                    break;                case -1:                    // 获取当前位置失败                    break;                default:                    break;            }        };    };    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        view = getLayoutInflater().from(this).inflate(R.layout.activity_hight_accuracy,null);        view.setSystemUiVisibility(View.SYSTEM_UI_FLAG_FULLSCREEN);        setContentView(view);        initialize(savedInstanceState);        LocationModule.getInstance(getApplicationContext(),null,mHandler).startLocation();        initMap();        String sha1 = LocationModule.getInstance(getApplicationContext(),null,mHandler).getSHA1(this);        Loger.e(TAG,"sha1 = " + sha1);    }    private void initialize (Bundle savedInstanceState) {        mMapView = (MapView) findViewById(R.id.mv_map);        //在activity执行onCreate时执行mMapView.onCreate(savedInstanceState)，实现地图生命周期管理        mMapView.onCreate(savedInstanceState);        LocationModule.getInstance(getApplicationContext(),null,mHandler).init(this);    }    private void initMap () {        if (aMap == null) {            aMap = mMapView.getMap();        }        aMap.setLocationSource(this);// 设置定位监听        aMap.getUiSettings().setMyLocationButtonEnabled(true);// 设置默认定位按钮是否显示        aMap.setMyLocationEnabled(true);// 设置为true表示显示定位层并可触发定位，false表示隐藏定位层并不可触发定位，默认是false        // 设置定位的类型为定位模式，参见类AMap。        aMap.setMyLocationType(AMap.LOCATION_TYPE_LOCATE);        //定位的小图标 默认是蓝点 这里自定义一团火，其实就是一张图片		/*MyLocationStyle myLocationStyle = new MyLocationStyle();		myLocationStyle.myLocationIcon(BitmapDescriptorFactory.fromResource(R.drawable.ic_launcher));		myLocationStyle.radiusFillColor(android.R.color.transparent);		myLocationStyle.strokeColor(android.R.color.transparent);		aMap.setMyLocationStyle(myLocationStyle);*/        aMap.moveCamera(CameraUpdateFactory.zoomTo(15));//缩放级别(4-20)        IntentFilter fliter = new IntentFilter(                ConnectivityManager.CONNECTIVITY_ACTION);        fliter.addAction(GEOFENCE_BROADCAST_ACTION);        registerReceiver(mGeoFenceReceiver, fliter);        Intent intent = new Intent(GEOFENCE_BROADCAST_ACTION);        mPendingIntent = PendingIntent.getBroadcast(getApplicationContext(), 0,                intent, 0);    }    private void addMarkerToMap(AMapLocation loc) {        LatLng latLng = new LatLng(loc.getLatitude(),loc.getLongitude());        MarkerOptions markerOption = new MarkerOptions();        markerOption.position(latLng);        markerOption.draggable(true);//		markerOption.icon(BitmapDescriptorFactory.fromResource(R.drawable.ic_launcher));        markerOption.icon(BitmapDescriptorFactory.defaultMarker());        markerOption.title("当前位置（"+ "精度：" +loc.getAccuracy() + "米）").                snippet("经度：" + loc.getLongitude() + "纬度：" + loc.getLatitude() + "\n" + loc.getCity() + loc.getDistrict() + loc.getStreet() + loc.getStreetNum() + "\n"                        + loc.getAoiName() + "\n"                        + loc.getPoiName());        Marker marker = aMap.addMarker(markerOption);        marker.setRotateAngle(30);        marker.showInfoWindow();    }    private BroadcastReceiver mGeoFenceReceiver = new BroadcastReceiver() {        @Override        public void onReceive(Context context, Intent intent) {            // 接收广播            if (intent.getAction().equals(GEOFENCE_BROADCAST_ACTION)) {                Bundle bundle = intent.getExtras();                // 根据广播的event来确定是在区域内还是在区域外                int status = bundle.getInt("event");                String geoFenceId = bundle.getString("fenceid");                if (status == 1) {                    // 进入围栏区域                    // 可以自定义提醒方式,示例中使用的是文字方式                    mHandler.sendEmptyMessage(Constant.Msg.MSG_GEOFENCE_IN);                } else if (status == 2) {                    // 离开围栏区域                    // 可以自定义提醒方式,示例中使用的是文字方式                    mHandler.sendEmptyMessage(Constant.Msg.MSG_GEOFENCE_OUT);                }            }        }    };    @Override    public void onLocationChanged(AMapLocation loc) {        if (null != loc) {            Message msg = mHandler.obtainMessage();            msg.obj = loc;            msg.what = Constant.Msg.MSG_LOCATION_FINISH;            mHandler.sendMessage(msg);        }    }    @Override    public void activate(OnLocationChangedListener onLocationChangedListener) {        mListener = onLocationChangedListener;    }    @Override    public void deactivate() {        mListener = null;    }    @Override    protected void onSaveInstanceState(Bundle outState) {        super.onSaveInstanceState(outState);        //在activity执行onSaveInstanceState时执行mMapView.onSaveInstanceState (outState)，实现地图生命周期管理        mMapView.onSaveInstanceState(outState);    }    @Override    protected void onResume() {        super.onResume();        //在activity执行onResume时执行mMapView.onResume ()，实现地图生命周期管理        mMapView.onResume();    }    @Override    protected void onPause() {        super.onPause();        //在activity执行onPause时执行mMapView.onPause ()，实现地图生命周期管理        mMapView.onPause();    }    @Override    protected void onDestroy() {        super.onDestroy();        LocationModule.getInstance(getApplicationContext(),null,mHandler).onDestroy();        //在activity执行onDestroy时执行mMapView.onDestroy()，实现地图生命周期管理        mMapView.onDestroy();        unregisterReceiver(mGeoFenceReceiver);    }}