/* * Copyright (C) 2015 The Android Open Source Project * * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * *      http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package com.victor.music;import android.annotation.TargetApi;import android.content.DialogInterface;import android.content.Intent;import android.graphics.Color;import android.os.Build;import android.os.Bundle;import android.os.Handler;import android.os.Message;import android.support.design.widget.CollapsingToolbarLayout;import android.support.v7.app.AlertDialog;import android.support.v7.app.AppCompatActivity;import android.support.v7.widget.LinearLayoutManager;import android.support.v7.widget.RecyclerView;import android.support.v7.widget.RecyclerView.OnScrollListener;import android.support.v7.widget.Toolbar;import android.util.Log;import android.view.MenuItem;import android.view.Window;import android.widget.AbsListView;import android.widget.ImageView;import android.widget.Toast;import com.bumptech.glide.Glide;import com.victor.adapter.MusicDetailAdapter;import com.victor.dao.DbDao;import com.victor.data.MusicData;import com.victor.module.DataObservable;import com.victor.module.HttpRequestHelper;import com.victor.module.HttpRequestModule;import com.victor.module.PlayModule;import com.victor.util.Constant;import com.victor.util.DownLoadUtil;import com.victor.util.FileUtil;import com.victor.util.JsonParser;import com.victor.util.SharePreferencesUtil;import com.victor.view.SpotsLoadingDlg;import com.victor.view.SweetAlertDialog;import org.json.JSONException;import java.io.File;import java.util.ArrayList;import java.util.List;import java.util.Observable;import java.util.Observer;public class MusicDetailActivity extends AppCompatActivity implements MusicDetailAdapter.OnItemClickListener,        MusicDetailAdapter.OnMoreClickListener,Observer {    private String TAG = "MusicDetailActivity";    public final static String EXTRA_NAME = "EXTRA_NAME";    public final static String EXTRA_TYPE = "EXTRA_TYPE";    public final static String EXTRA_IMG = "EXTRA_IMG";    public String type = "";    public String imgUrl = "";    private RecyclerView mRecyclerView;    private LinearLayoutManager linearLayoutManager;    private List<MusicData> musicDatas = new ArrayList<>();    private MusicData musicData;    private MusicData downLoadInfo;    private MusicDetailAdapter musicAdapter;    private HttpRequestHelper mHttpRequestHelper;    private SpotsLoadingDlg mSpotsLoadingDlg;    private SweetAlertDialog mSweetAlertDialog;    private int currentPosition = -1;    private boolean isLoading;    private int offSet;    Handler mHandler = new Handler(){        @Override        public void handleMessage(Message msg) {            switch (msg.what) {                case Constant.Action.PLAY:                    mSpotsLoadingDlg.dismiss();                    if (musicData != null) {                        PlayModule.getInstance(getApplicationContext()).playOnline(musicData);                        if (PlayModule.getInstance(getApplicationContext()).isDownloadSidePlay()) {                            downLoadInfo = musicData;                            mHandler.sendEmptyMessageDelayed(Constant.Action.DOWNLOAD,500);                        }                    }                    break;                case Constant.Action.DOWNLOAD:                    mSpotsLoadingDlg.dismiss();                    if (downLoadInfo != null) {                        Toast.makeText(getApplicationContext(),"正在后台下载 " + downLoadInfo.title,Toast.LENGTH_SHORT).show();                        DownLoadUtil.getInstance().downLoad(downLoadInfo);                    }                    break;                case Constant.Msg.REQUEST_SUCCESS:                    mSpotsLoadingDlg.dismiss();                    isLoading = false;                    List<MusicData> musicList = (List<MusicData>) msg.obj;                    if (musicList != null && musicList.size() > 0) {                        DbDao.getInstance(getApplicationContext()).insertMusics(musicList,Constant.TB.MUSIC_ONLINE);                        offSet += Constant.PAGE_SIZE;                        musicDatas.addAll(musicList);                        musicAdapter.notifyDataSetChanged();                    }                    break;                case Constant.Msg.REQUEST_FAILED:                    mSpotsLoadingDlg.dismiss();                    showTipDlg("访问服务器失败！");                    break;                case Constant.Msg.SOCKET_TIME_OUT:                    mSpotsLoadingDlg.dismiss();                    showTipDlg("访问服务器超时！");                    break;                case Constant.Msg.PARSING_EXCEPTION:                    mSpotsLoadingDlg.dismiss();                    showTipDlg("数据解析失败！");                    break;                case Constant.Msg.NETWORK_ERROR:                    mSpotsLoadingDlg.dismiss();                    showTipDlg("网络错误，请检查网络是否连接！");                    break;            }        }    };    @Override    public void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_detail);        Intent intent = getIntent();        final String cheeseName = intent.getStringExtra(EXTRA_NAME);        type = intent.getStringExtra(EXTRA_TYPE);        imgUrl = intent.getStringExtra(EXTRA_IMG);        final Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);        setSupportActionBar(toolbar);        getSupportActionBar().setDisplayHomeAsUpEnabled(true);        CollapsingToolbarLayout collapsingToolbar =                (CollapsingToolbarLayout) findViewById(R.id.collapsing_toolbar);        collapsingToolbar.setTitle(cheeseName);        initialize();        loadBackdrop();        requestMusicData();    }    private void initialize () {        DataObservable.getInstance().addObserver(this);        mHttpRequestHelper = new HttpRequestHelper(this);        mSpotsLoadingDlg = new SpotsLoadingDlg(this);        mRecyclerView = (RecyclerView) findViewById(R.id.recycler_view);        linearLayoutManager = new LinearLayoutManager(this);//这里用线性显示 类似于listview        mRecyclerView.setLayoutManager(linearLayoutManager);        musicAdapter = new MusicDetailAdapter(getApplicationContext(),this,this);        musicAdapter.setHeaderVisible(false);        musicAdapter.setMusicDatas(musicDatas);        mRecyclerView.setAdapter(musicAdapter);        mRecyclerView.addOnScrollListener(new OnScrollListener() {            @Override            public void onScrollStateChanged(RecyclerView recyclerView, int newState) {                super.onScrollStateChanged(recyclerView, newState);            }            @Override            public void onScrolled(RecyclerView recyclerView, int dx, int dy) {                super.onScrolled(recyclerView, dx, dy);                int lastVisibleItemPosition = linearLayoutManager.findLastVisibleItemPosition();                if (lastVisibleItemPosition + 1 == musicAdapter.getItemCount()) {                    if (!isLoading) {                        isLoading = true;                        requestMusicData();                    }                }            }        });    }    private void loadBackdrop() {        final ImageView imageView = (ImageView) findViewById(R.id.backdrop);        Glide.with(getApplicationContext()).load(imgUrl).centerCrop().into(imageView);    }    private void requestMusicData () {        mSpotsLoadingDlg.setTip("正在加载歌曲...");        mSpotsLoadingDlg.show();        Bundle bundle = new Bundle();        bundle.putString(Constant.MUSIC_TYPE_KEY,type);        bundle.putInt(Constant.PAGE_SIZE_KEY,Constant.PAGE_SIZE);        bundle.putInt(Constant.OFF_SET_KEY,offSet);        mHttpRequestHelper.sendRequestWithParms(Constant.Msg.REQUEST_MUSICS,bundle);    }    private void showTipDlg (String msg) {        mSweetAlertDialog = new SweetAlertDialog(this);        mSweetAlertDialog.setTitleText("提示");        mSweetAlertDialog.setContentText(msg);        mSweetAlertDialog.showCancelBtn(false);        mSweetAlertDialog.setCancelable(false);        mSweetAlertDialog.setConfirmClickListener(new SweetAlertDialog.OnSweetClickListener() {            @Override            public void onClick(SweetAlertDialog sweetAlertDialog) {                // TODO Auto-generated method stub                mSweetAlertDialog.dismissWithAnimation();            }        });        mSweetAlertDialog.show();    }    @Override    public boolean onOptionsItemSelected(MenuItem item) {        switch (item.getItemId()) {            case android.R.id.home:                finish();                return true;            default:                return super.onOptionsItemSelected(item);        }    }    @Override    public void OnItemClick(int position) {        getMusicInfo(position,Constant.Action.PLAY);    }    private void getMusicInfo (final int position,final int action) {        if (musicDatas != null && musicDatas.size() > 0) {            if (position < musicDatas.size()) {                mSpotsLoadingDlg.setTip("拼命加载中...");                mSpotsLoadingDlg.show();//                mHttpRequestHelper.sendRequestWithParms(Constant.Msg.REQUEST_MUSIC,musicDatas.get(position).song_id);                String url = String.format(Constant.MUSIC_PLAY_URL,musicDatas.get(position).song_id);                Log.e(TAG,"url = " + url);                HttpRequestModule.request(TAG, this,url, new HttpRequestModule.OnCompleteListener() {                    @Override                    public void onComplete(int status, Object result) {                        if (status == 1) {                            try {                                if (action == Constant.Action.PLAY) {                                    musicData = JsonParser.parseMusic(result.toString());                                    currentPosition = position;                                } else if (action == Constant.Action.DOWNLOAD) {                                    downLoadInfo = JsonParser.parseMusic(result.toString());                                }                                mHandler.sendEmptyMessage(action);                            } catch (JSONException e) {                                e.printStackTrace();                            }                        }                    }                });            }        }    }    @Override    protected void onDestroy() {        DataObservable.getInstance().deleteObserver(this);        if (mHttpRequestHelper != null) {            mHttpRequestHelper.onDestroy();        }        super.onDestroy();    }    @Override    public void update(Observable observable, Object data) {        if (data instanceof Bundle) {            Bundle bundle = (Bundle) data;            int msg = bundle.getInt(Constant.REQUEST_MSG_KEY);            int status = bundle.getInt(Constant.STATUS_KEY);            if (msg == Constant.Msg.REQUEST_MUSICS) {                List<MusicData> musicList = (List<MusicData>) bundle.getSerializable(Constant.INTENT_DATA);                switch (status) {                    case Constant.Msg.REQUEST_SUCCESS:                        Message message = mHandler.obtainMessage(Constant.Msg.REQUEST_SUCCESS,musicList);                        message.sendToTarget();//                        mHandler.sendEmptyMessage(Constant.Msg.REQUEST_SUCCESS);                        break;                    case Constant.Msg.REQUEST_FAILED:                        mHandler.sendEmptyMessage(Constant.Msg.REQUEST_FAILED);                        break;                    case Constant.Msg.SOCKET_TIME_OUT:                        mHandler.sendEmptyMessage(Constant.Msg.SOCKET_TIME_OUT);                        break;                    case Constant.Msg.PARSING_EXCEPTION:                        mHandler.sendEmptyMessage(Constant.Msg.PARSING_EXCEPTION);                        break;                    case Constant.Msg.NETWORK_ERROR:                        mHandler.sendEmptyMessage(Constant.Msg.NETWORK_ERROR);                        break;                }            }        }    }    @Override    public void OnMoreClick(final int position) {        final MusicData info = musicDatas.get(position);        AlertDialog.Builder dialog = new AlertDialog.Builder(this);        dialog.setTitle(info.title);        String path = FileUtil.getMusicDir() + FileUtil.getMp3FileName(info.artist, info.title);        File file = new File(path);        int itemsId = file.exists() ? R.array.online_music_dialog_without_download : R.array.online_music_dialog;        dialog.setItems(itemsId, new DialogInterface.OnClickListener() {            @Override            public void onClick(DialogInterface dialog, int which) {                switch (which) {                    case 0:// 分享                        break;                    case 1:// 查看歌手信息                        break;                    case 2:// 下载                        if (currentPosition == position && musicData != null) {                            downLoadInfo = musicData;                            mHandler.sendEmptyMessage(Constant.Action.DOWNLOAD);                            return;                        }                        getMusicInfo(position,Constant.Action.DOWNLOAD);                        break;                }            }        });        dialog.show();    }    @TargetApi(Build.VERSION_CODES.LOLLIPOP)    @Override    protected void onResume() {        super.onResume();        Window window = getWindow();        window.setStatusBarColor(Color.TRANSPARENT);    }}