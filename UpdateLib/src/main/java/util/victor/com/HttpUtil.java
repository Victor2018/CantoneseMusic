package util.victor.com;import android.content.Context;import android.net.ConnectivityManager;import android.net.NetworkInfo;import android.util.Log;import org.apache.http.HttpEntity;import org.apache.http.HttpResponse;import org.apache.http.client.ClientProtocolException;import org.apache.http.client.methods.HttpGet;import org.apache.http.client.methods.HttpPost;import org.apache.http.impl.client.DefaultHttpClient;import org.apache.http.params.CoreConnectionPNames;import org.apache.http.params.CoreProtocolPNames;import org.apache.http.protocol.HTTP;import org.apache.http.util.EntityUtils;import java.io.IOException;import java.net.MalformedURLException;import java.net.SocketTimeoutException;import java.net.URL;/** * Created by victor on 2016/1/21. */public class HttpUtil {    private static String TAG = "HttpUtil";    public static void HttpPostRequest(String strUrl){        HttpPost httpPost = new HttpPost(strUrl);        DefaultHttpClient httpClient = new DefaultHttpClient();        httpClient.getParams().setParameter(CoreProtocolPNames.HTTP_CONTENT_CHARSET, HTTP.UTF_8);        httpClient.getParams().setParameter(CoreConnectionPNames.CONNECTION_TIMEOUT,10000);        httpClient.getParams().setParameter(CoreConnectionPNames.SO_TIMEOUT,15000);        try {            HttpResponse httpResponse = httpClient.execute(httpPost);            int statusCode = httpResponse.getStatusLine().getStatusCode();            Log.e(TAG, "HttpPostRequest-statusCode=" + statusCode);            HttpEntity entity = httpResponse.getEntity();            String res = EntityUtils.toString(entity, "utf-8");            System.out.println("++++++++++++++++post+++++++++++++++++++");            System.out.println("res=" + res);        } catch (ClientProtocolException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (IOException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }    }    public static String HttpGetRequest(final String strUrl) throws SocketTimeoutException{        String result = "";        try {            URL url = new URL(strUrl);            HttpGet request = new HttpGet(strUrl);            DefaultHttpClient client = new DefaultHttpClient();            client.getParams().setParameter(CoreProtocolPNames.HTTP_CONTENT_CHARSET, HTTP.UTF_8);            client.getParams().setParameter(CoreProtocolPNames.HTTP_ELEMENT_CHARSET, HTTP.UTF_8);            client.getParams().setParameter(CoreConnectionPNames.CONNECTION_TIMEOUT,10000);            client.getParams().setParameter(CoreConnectionPNames.SO_TIMEOUT,15000);            HttpResponse response = client.execute(request);            int statusCode = response.getStatusLine().getStatusCode();            Log.e(TAG, "HttpGetRequest-statusCode=" + statusCode);            if(response.getStatusLine().getStatusCode() == 200){                HttpEntity entity = response.getEntity();                result = EntityUtils.toString(entity, "utf-8");            }        } catch (MalformedURLException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (ClientProtocolException e) {            // TODO Auto-generated catch block            e.printStackTrace();        } catch (IOException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        return result;    }    /**     * 检测网络是否可用     * @param context     * @return     */    public static boolean isNetEnable(Context context) {        ConnectivityManager connManager = (ConnectivityManager) context                .getSystemService(Context.CONNECTIVITY_SERVICE);        NetworkInfo networkinfo = connManager.getActiveNetworkInfo();        if (networkinfo == null || !networkinfo.isAvailable()) {            return false;        }        return true;    }}