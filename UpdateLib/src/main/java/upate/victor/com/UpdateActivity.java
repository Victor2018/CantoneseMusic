package upate.victor.com;import android.content.Intent;import android.net.Uri;import android.os.Bundle;import android.os.Handler;import android.os.Message;import android.support.design.widget.FloatingActionButton;import android.support.design.widget.Snackbar;import android.support.v4.app.FragmentActivity;import android.support.v7.app.AppCompatActivity;import android.support.v7.widget.Toolbar;import android.text.TextUtils;import android.util.Log;import android.view.View;import android.view.Menu;import android.view.MenuItem;import android.widget.Toast;import org.json.JSONObject;import java.io.File;import java.io.FileOutputStream;import java.io.InputStream;import java.net.URI;import java.net.URL;import java.net.URLConnection;import java.util.Observable;import java.util.Observer;import model.victor.com.CheckUpdateTask;import model.victor.com.DataObservable;import model.victor.com.DownLoadTask;import util.victor.com.AppUtil;import util.victor.com.Constant;public class UpdateActivity extends AppCompatActivity implements CheckUpdateTask.OnUpdateCompleteListener,DownLoadTask.OnDownloadCompeleteListener {    private String TAG = "UpdateActivity";    private CheckUpdateTask mCheckUpdateTask;    private DownLoadTask mDownLoadTask;    private boolean isDownloading;//正在下载    Handler mHandler = new Handler(){        @Override        public void handleMessage(Message msg) {            switch (msg.what){                case Constant.Msg.UPDATE_REQUEST:                    checkUpdate();                    break;                case Constant.Msg.REQUEST_SUCCESS:                    parseData(msg.obj.toString());                    break;                case Constant.Msg.REQUEST_FAILED:                    isDownloading = false;                    Toast.makeText(getApplicationContext(), "访问服务器失败！", Toast.LENGTH_SHORT).show();                    break;                case Constant.Msg.NETWORK_ERROR:                    isDownloading = false;                    Toast.makeText(getApplicationContext(),"网络错误，请检查网络是否连接！",Toast.LENGTH_SHORT).show();                    break;                case Constant.Msg.SOCKET_TIME_OUT:                    isDownloading = false;                    Toast.makeText(getApplicationContext(),"访问服务器超时，请重试！",Toast.LENGTH_SHORT).show();                    break;                case Constant.Msg.DOWNLOAD_OVER:                    isDownloading = false;                    Toast.makeText(getApplicationContext(),"下载完毕！",Toast.LENGTH_SHORT).show();                    Uri uri = Uri.parse("file://" + new File("/sdcard/" + "CantoneseMusic.apk"));                    Intent intent = new Intent(Intent.ACTION_VIEW);                    intent.setDataAndType(uri,"application/vnd.android.package-archive");                    startActivity(intent);                    break;            }            if (!isDownloading) {                mHandler.removeCallbacks(mUpdateRunnable);                mHandler.postDelayed(mUpdateRunnable, 1000 * 60 * 5);            }        }    };    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        initialize();    }    private void initialize () {        mHandler.postDelayed(mUpdateRunnable,10 * 1000);    }    private void checkUpdate(){        Log.e(TAG, "******************* check update ************************");        mCheckUpdateTask = new CheckUpdateTask(getApplicationContext(),this);        mCheckUpdateTask.requestUpdateData();    }    private void parseData(String result) {        Log.e(TAG,"parseData()......");        try {            JSONObject data = new JSONObject(result);            String appName = data.getString("app_name").trim();            String versionName = data.getString("version_name").trim();            int versionCode = data.getInt("version_code");            String updateContent = data.getString("update_content").trim();            String downUrl = data.getString("url").trim();            int oldVersionCode = AppUtil.getAppVersionCode(getApplicationContext());            if (versionCode > oldVersionCode) {                Log.e(TAG, "******************* find new version *************************");                if (!TextUtils.isEmpty(downUrl)) {                    isDownloading = true;                    mDownLoadTask = new DownLoadTask(getApplicationContext(),appName,downUrl,this);                    mDownLoadTask.requestDownloadData();                } else {                    isDownloading = false;                    Log.e(TAG,"downUrl is null!!!!!!");                }            } else {                Log.e(TAG, "******************* not find new version *************************");            }        }catch (Exception e) {            Log.e(TAG,"parse data error l!!!!!!");            Log.e(TAG,"result = " + result);        }    }    Runnable mUpdateRunnable = new Runnable() {        @Override        public void run() {            mHandler.removeMessages(Constant.Msg.UPDATE_REQUEST);            mHandler.sendEmptyMessage(Constant.Msg.UPDATE_REQUEST);        }    };    @Override    protected void onDestroy() {        super.onDestroy();    }    @Override    public void onUpdateCompelete(Bundle result) {        Log.e(TAG, "onUpdateCompelete()......");        int status = result.getInt(Constant.STATUS_KEY);        int requstMsg = result.getInt(Constant.REQUEST_MSG_KEY);        Message msg = new Message();        msg.arg1 = requstMsg;        switch (status) {            case Constant.Msg.REQUEST_SUCCESS:                msg.what = Constant.Msg.REQUEST_SUCCESS;                msg.obj = result.getString(Constant.UPDATE_DATA_KEY);                Log.e(TAG, "receive-msg.obj = " + msg.obj.toString());                break;            case Constant.Msg.REQUEST_FAILED:                msg.what = Constant.Msg.REQUEST_FAILED;                break;            case Constant.Msg.NETWORK_ERROR:                msg.what = Constant.Msg.NETWORK_ERROR;                break;            case Constant.Msg.SOCKET_TIME_OUT:                msg.what = Constant.Msg.SOCKET_TIME_OUT;                break;        }        if (msg.arg1 == Constant.Msg.UPDATE_REQUEST) {            mHandler.sendMessage(msg);        } else if (msg.arg1 == Constant.Msg.DOWNLOAD_OVER) {            msg.what = Constant.Msg.DOWNLOAD_OVER;            mHandler.sendMessage(msg);        }    }    @Override    public void onDownloadComplete() {        mHandler.sendEmptyMessage(Constant.Msg.DOWNLOAD_OVER);    }}